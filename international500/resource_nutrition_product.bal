// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_NUTRITIONPRODUCT = "http://hl7.org/fhir/StructureDefinition/NutritionProduct";
public const RESOURCE_NAME_NUTRITIONPRODUCT = "NutritionProduct";

# FHIR NutritionProduct resource record.
#
# + resourceType - The type of the resource describes
# + note - Comments made about the product.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The code assigned to the product, for example a USDA NDB number, a USDA FDC ID number, or a Langual code.
# + ingredient - Ingredients contained in this product.
# + instance - Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
# + nutrient - The product's nutritional information expressed by the nutrients.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + characteristic - Specifies descriptive properties of the nutrition product.
# + knownAllergen - Allergens that are known or suspected to be a part of this nutrition product.
# + manufacturer - The organisation (manufacturer, representative or legal authorization holder) that is responsible for the device.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + category - Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.
# + status - The current state of the product.
@r5:ResourceDefinition {
    resourceType: "NutritionProduct",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/NutritionProduct",
    elements: {
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.note"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.extension"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "NutritionProduct.code",
            valueSet: "http://hl7.org/fhir/ValueSet/edible-substance-type"
        },
        "ingredient" : {
            name: "ingredient",
            dataType: NutritionProductIngredient,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.ingredient"
        },
        "instance" : {
            name: "instance",
            dataType: NutritionProductInstance,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.instance"
        },
        "nutrient" : {
            name: "nutrient",
            dataType: NutritionProductNutrient,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.nutrient"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "NutritionProduct.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "characteristic" : {
            name: "characteristic",
            dataType: NutritionProductCharacteristic,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.characteristic"
        },
        "knownAllergen" : {
            name: "knownAllergen",
            dataType: r5:CodeableReference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.knownAllergen",
            valueSet: "http://hl7.org/fhir/ValueSet/allergen-class"
        },
        "manufacturer" : {
            name: "manufacturer",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.manufacturer"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "NutritionProduct.meta"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "NutritionProduct.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "NutritionProduct.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "NutritionProduct.text"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "NutritionProduct.category",
            valueSet: "http://hl7.org/fhir/ValueSet/nutrition-product-category"
        },
        "status" : {
            name: "status",
            dataType: NutritionProductStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "NutritionProduct.status",
            valueSet: "http://hl7.org/fhir/ValueSet/nutritionproduct-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type NutritionProduct record {|
    *r5:DomainResource;

    RESOURCE_NAME_NUTRITIONPRODUCT resourceType = RESOURCE_NAME_NUTRITIONPRODUCT;

    r5:Annotation[] note?;
    r5:Extension[] extension?;
    r5:CodeableConcept code?;
    NutritionProductIngredient[] ingredient?;
    NutritionProductInstance[] instance?;
    NutritionProductNutrient[] nutrient?;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    NutritionProductCharacteristic[] characteristic?;
    r5:CodeableReference[] knownAllergen?;
    r5:Reference[] manufacturer?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:uri implicitRules?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept[] category?;
    NutritionProductStatus status;
    r5:Element ...;
|};

# FHIR NutritionProductIngredient datatype record.
#
# + amount - The amount of ingredient that is in the product.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + item - The ingredient contained in the product.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "NutritionProductIngredient",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Ratio,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The amount of ingredient that is in the product.",
            path: "NutritionProduct.ingredient.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "NutritionProduct.ingredient.extension"
        },
        "item": {
            name: "item",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The ingredient contained in the product.",
            path: "NutritionProduct.ingredient.item"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "NutritionProduct.ingredient.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "NutritionProduct.ingredient.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type NutritionProductIngredient record {|
    *r5:BackboneElement;

    r5:Ratio[] amount?;
    r5:Extension[] extension?;
    r5:CodeableReference item;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR NutritionProductCharacteristic datatype record.
#
# + valueCodeableConcept - The actual characteristic value corresponding to the type.
# + valueBase64Binary - The actual characteristic value corresponding to the type.
# + valueBoolean - The actual characteristic value corresponding to the type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueAttachment - The actual characteristic value corresponding to the type.
# + valueString - The actual characteristic value corresponding to the type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - A code specifying which characteristic of the product is being described (for example, colour, shape).
# + valueQuantity - The actual characteristic value corresponding to the type.
@r5:DataTypeDefinition {
    name: "NutritionProductCharacteristic",
    baseType: (),
    elements: {
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual characteristic value corresponding to the type.",
            path: "NutritionProduct.characteristic.value[x]"
        },
        "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r5:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual characteristic value corresponding to the type.",
            path: "NutritionProduct.characteristic.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual characteristic value corresponding to the type.",
            path: "NutritionProduct.characteristic.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "NutritionProduct.characteristic.extension"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual characteristic value corresponding to the type.",
            path: "NutritionProduct.characteristic.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual characteristic value corresponding to the type.",
            path: "NutritionProduct.characteristic.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "NutritionProduct.characteristic.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "NutritionProduct.characteristic.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code specifying which characteristic of the product is being described (for example, colour, shape).",
            path: "NutritionProduct.characteristic.type"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual characteristic value corresponding to the type.",
            path: "NutritionProduct.characteristic.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type NutritionProductCharacteristic record {|
    *r5:BackboneElement;

    r5:CodeableConcept valueCodeableConcept;
    r5:base64Binary valueBase64Binary;
    boolean valueBoolean;
    r5:Extension[] extension?;
    r5:Attachment valueAttachment;
    string valueString;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type;
    r5:Quantity valueQuantity;
|};

# NutritionProductStatus enum
public enum NutritionProductStatus {
   CODE_STATUS_INACTIVE = "inactive",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error"
}

# FHIR NutritionProductNutrient datatype record.
#
# + amount - The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + item - The (relevant) nutrients in the product.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "NutritionProductNutrient",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Ratio,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.",
            path: "NutritionProduct.nutrient.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "NutritionProduct.nutrient.extension"
        },
        "item": {
            name: "item",
            dataType: r5:CodeableReference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The (relevant) nutrients in the product.",
            path: "NutritionProduct.nutrient.item"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "NutritionProduct.nutrient.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "NutritionProduct.nutrient.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type NutritionProductNutrient record {|
    *r5:BackboneElement;

    r5:Ratio[] amount?;
    r5:Extension[] extension?;
    r5:CodeableReference item?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR NutritionProductInstance datatype record.
#
# + identifier - The identifier for the physical instance, typically a serial number or manufacturer number.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + biologicalSourceEvent - An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.
# + quantity - The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name for the specific product.
# + useBy - The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
# + expiry - The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + lotNumber - The identification of the batch or lot of the product.
@r5:DataTypeDefinition {
    name: "NutritionProductInstance",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The identifier for the physical instance, typically a serial number or manufacturer number.",
            path: "NutritionProduct.instance.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "NutritionProduct.instance.extension"
        },
        "biologicalSourceEvent": {
            name: "biologicalSourceEvent",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.",
            path: "NutritionProduct.instance.biologicalSourceEvent"
        },
        "quantity": {
            name: "quantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.",
            path: "NutritionProduct.instance.quantity"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "NutritionProduct.instance.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name for the specific product.",
            path: "NutritionProduct.instance.name"
        },
        "useBy": {
            name: "useBy",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.",
            path: "NutritionProduct.instance.useBy"
        },
        "expiry": {
            name: "expiry",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.",
            path: "NutritionProduct.instance.expiry"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "NutritionProduct.instance.id"
        },
        "lotNumber": {
            name: "lotNumber",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The identification of the batch or lot of the product.",
            path: "NutritionProduct.instance.lotNumber"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type NutritionProductInstance record {|
    *r5:BackboneElement;

    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    r5:Identifier biologicalSourceEvent?;
    r5:Quantity quantity?;
    r5:Extension[] modifierExtension?;
    string name?;
    r5:dateTime useBy?;
    r5:dateTime expiry?;
    string id?;
    string lotNumber?;
|};

