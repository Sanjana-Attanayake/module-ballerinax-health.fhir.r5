// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_SUBSTANCE = "http://hl7.org/fhir/StructureDefinition/Substance";
public const RESOURCE_NAME_SUBSTANCE = "Substance";

# FHIR Substance resource record.
#
# + resourceType - The type of the resource describes
# + identifier - Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly).
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code (or set of codes) that identify this substance.
# + ingredient - A substance can be composed of other substances.
# + instance - A boolean to indicate if this an instance of a substance or a kind of one (a definition).
# + quantity - The amount of the substance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A description of the substance - its appearance, handling requirements, and other usage notes.
# + language - The base language in which the resource is written.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + expiry - When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + category - A code that classifies the general type of substance. This is used for searching, sorting and display purposes.
# + status - A code to indicate if the substance is actively used.
@r5:ResourceDefinition {
    resourceType: "Substance",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/Substance",
    elements: {
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Substance.identifier"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Substance.extension"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Substance.code",
            valueSet: "http://hl7.org/fhir/ValueSet/substance-code"
        },
        "ingredient" : {
            name: "ingredient",
            dataType: SubstanceIngredient,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Substance.ingredient"
        },
        "instance" : {
            name: "instance",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            path: "Substance.instance"
        },
        "quantity" : {
            name: "quantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.quantity"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Substance.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.description"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Substance.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.meta"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.implicitRules"
        },
        "expiry" : {
            name: "expiry",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.expiry"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.text"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Substance.category",
            valueSet: "http://hl7.org/fhir/ValueSet/substance-category"
        },
        "status" : {
            name: "status",
            dataType: SubstanceStatus,
            min: 0,
            max: 1,
            isArray: false,
            path: "Substance.status",
            valueSet: "http://hl7.org/fhir/ValueSet/substance-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type Substance record {|
    *r5:DomainResource;

    RESOURCE_NAME_SUBSTANCE resourceType = RESOURCE_NAME_SUBSTANCE;

    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    r5:CodeableReference code;
    SubstanceIngredient[] ingredient?;
    boolean instance;
    r5:SimpleQuantity quantity?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    r5:code language?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:uri implicitRules?;
    r5:dateTime expiry?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept[] category?;
    SubstanceStatus status?;
    r5:Element ...;
|};

# FHIR SubstanceIngredient datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + quantity - The amount of the ingredient in the substance - a concentration ratio.
# + substanceCodeableConcept - Another substance that is a component of this substance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + substanceReference - Another substance that is a component of this substance.
@r5:DataTypeDefinition {
    name: "SubstanceIngredient",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Substance.ingredient.extension"
        },
        "quantity": {
            name: "quantity",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "The amount of the ingredient in the substance - a concentration ratio.",
            path: "Substance.ingredient.quantity"
        },
        "substanceCodeableConcept": {
            name: "substanceCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Another substance that is a component of this substance.",
            path: "Substance.ingredient.substance[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Substance.ingredient.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Substance.ingredient.id"
        },
        "substanceReference": {
            name: "substanceReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Another substance that is a component of this substance.",
            path: "Substance.ingredient.substance[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceIngredient record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Ratio quantity?;
    r5:CodeableConcept substanceCodeableConcept;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:Reference substanceReference;
|};

# SubstanceStatus enum
public enum SubstanceStatus {
   CODE_STATUS_INACTIVE = "inactive",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error"
}

