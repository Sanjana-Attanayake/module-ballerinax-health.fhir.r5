// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_AUDITEVENT = "http://hl7.org/fhir/StructureDefinition/AuditEvent";
public const RESOURCE_NAME_AUDITEVENT = "AuditEvent";

# FHIR AuditEvent resource record.
#
# + resourceType - The type of the resource describes
# + severity - Indicates and enables segmentation of various severity including debugging from critical.
# + agent - An actor taking an active role in the event or activity that is logged.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Describes what happened. The most specific code for the event.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + encounter - This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
# + 'source - The actor that is reporting the event.
# + occurredPeriod - The time or period during which the activity occurred.
# + recorded - The time when the event was recorded.
# + authorization - The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + patient - The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
# + action - Indicator for type of action performed during the event that generated the audit.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + category - Classification of the type of event.
# + basedOn - Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
# + entity - Specific instances of data or objects that have been accessed.
# + occurredDateTime - The time or period during which the activity occurred.
# + outcome - Indicates whether the event succeeded or failed. A free text descripiton can be given in outcome.text.
@r5:ResourceDefinition {
    resourceType: "AuditEvent",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/AuditEvent",
    elements: {
        "severity" : {
            name: "severity",
            dataType: AuditEventSeverity,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.severity",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-severity|5.0.0"
        },
        "agent" : {
            name: "agent",
            dataType: AuditEventAgent,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.agent"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.extension"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            path: "AuditEvent.code",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-sub-type"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.encounter"
        },
        "source" : {
            name: "source",
            dataType: AuditEventSource,
            min: 1,
            max: 1,
            isArray: false,
            path: "AuditEvent.source"
        },
        "occurredPeriod" : {
            name: "occurredPeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.occurred[x]"
        },
        "recorded" : {
            name: "recorded",
            dataType: r5:instant,
            min: 1,
            max: 1,
            isArray: false,
            path: "AuditEvent.recorded"
        },
        "authorization" : {
            name: "authorization",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.authorization",
            valueSet: "http://terminology.hl7.org/ValueSet/v3-PurposeOfUse"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.meta"
        },
        "patient" : {
            name: "patient",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.patient"
        },
        "action" : {
            name: "action",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.action",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-action|5.0.0"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.text"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.category",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-type"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.basedOn"
        },
        "entity" : {
            name: "entity",
            dataType: AuditEventEntity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.entity"
        },
        "occurredDateTime" : {
            name: "occurredDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.occurred[x]"
        },
        "outcome" : {
            name: "outcome",
            dataType: AuditEventOutcome,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.outcome"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type AuditEvent record {|
    *r5:DomainResource;

    RESOURCE_NAME_AUDITEVENT resourceType = RESOURCE_NAME_AUDITEVENT;

    AuditEventSeverity severity?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.AuditEvent.agent constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.AuditEvent.agent constraint. This field must be an array containing at most one item."
        }
    }
    AuditEventAgent[] agent;
    r5:Extension[] extension?;
    r5:CodeableConcept code;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    r5:Reference encounter?;
    AuditEventSource 'source;
    r5:Period occurredPeriod?;
    r5:instant recorded;
    r5:CodeableConcept[] authorization?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:Reference patient?;
    r5:code action?;
    r5:uri implicitRules?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept[] category?;
    r5:Reference[] basedOn?;
    AuditEventEntity[] entity?;
    r5:dateTime occurredDateTime?;
    AuditEventOutcome outcome?;
    r5:Element ...;
|};

# FHIR AuditEventOutcome datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Indicates whether the event succeeded or failed.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + detail - Additional details about the error. This may be a text description of the error or a system code that identifies the error.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AuditEventOutcome",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.outcome.extension"
        },
        "code": {
            name: "code",
            dataType: r5:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "Indicates whether the event succeeded or failed.",
            path: "AuditEvent.outcome.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.outcome.modifierExtension"
        },
        "detail": {
            name: "detail",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Additional details about the error. This may be a text description of the error or a system code that identifies the error.",
            path: "AuditEvent.outcome.detail"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.outcome.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AuditEventOutcome record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Coding code;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept[] detail?;
    string id?;
|};

# FHIR AuditEventAgent datatype record.
#
# + networkUri - When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - The Functional Role of the user when performing the event.
# + requestor - Indicator that the user is or is not the requestor, or initiator, for the event being audited.
# + authorization - The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
# + networkString - When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
# + location - Where the agent location is known, the agent location when the event occurred.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + networkReference - When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.
# + policy - Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
# + who - Reference to who this agent is that was involved in the event.
@r5:DataTypeDefinition {
    name: "AuditEventAgent",
    baseType: (),
    elements: {
        "networkUri": {
            name: "networkUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.",
            path: "AuditEvent.agent.network[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.agent.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.",
            path: "AuditEvent.agent.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.agent.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The Functional Role of the user when performing the event.",
            path: "AuditEvent.agent.type"
        },
        "requestor": {
            name: "requestor",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicator that the user is or is not the requestor, or initiator, for the event being audited.",
            path: "AuditEvent.agent.requestor"
        },
        "authorization": {
            name: "authorization",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The authorization (e.g., PurposeOfUse) that was used during the event being recorded.",
            path: "AuditEvent.agent.authorization"
        },
        "networkString": {
            name: "networkString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.",
            path: "AuditEvent.agent.network[x]"
        },
        "location": {
            name: "location",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Where the agent location is known, the agent location when the event occurred.",
            path: "AuditEvent.agent.location"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.agent.id"
        },
        "networkReference": {
            name: "networkReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "When the event utilizes a network there should be an agent describing the local system, and an agent describing remote system, with the network interface details.",
            path: "AuditEvent.agent.network[x]"
        },
        "policy": {
            name: "policy",
            dataType: r5:uri,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.",
            path: "AuditEvent.agent.policy"
        },
        "who": {
            name: "who",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Reference to who this agent is that was involved in the event.",
            path: "AuditEvent.agent.who"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AuditEventAgent record {|
    *r5:BackboneElement;

    r5:uri networkUri?;
    r5:Extension[] extension?;
    r5:CodeableConcept[] role?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept 'type?;
    boolean requestor?;
    r5:CodeableConcept[] authorization?;
    string networkString?;
    r5:Reference location?;
    string id?;
    r5:Reference networkReference?;
    r5:uri[] policy?;
    r5:Reference who;
|};

# AuditEventSeverity enum
public enum AuditEventSeverity {
   CODE_SEVERITY_DEBUG = "debug",
   CODE_SEVERITY_CRITICAL = "critical",
   CODE_SEVERITY_ALERT = "alert",
   CODE_SEVERITY_EMERGENCY = "emergency",
   CODE_SEVERITY_WARNING = "warning",
   CODE_SEVERITY_INFORMATIONAL = "informational",
   CODE_SEVERITY_ERROR = "error",
   CODE_SEVERITY_NOTICE = "notice"
}

# FHIR AuditEventEntity datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - Code representing the role the entity played in the event being audited.
# + what - Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource.
# + securityLabel - Security labels for the identified entity.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + query - The query parameters for a query-type entities.
# + detail - Tagged value pairs for conveying additional information about the entity.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AuditEventEntity",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.entity.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Code representing the role the entity played in the event being audited.",
            path: "AuditEvent.entity.role"
        },
        "what": {
            name: "what",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource.",
            path: "AuditEvent.entity.what"
        },
        "securityLabel": {
            name: "securityLabel",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels for the identified entity.",
            path: "AuditEvent.entity.securityLabel"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.entity.modifierExtension"
        },
        "query": {
            name: "query",
            dataType: r5:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "The query parameters for a query-type entities.",
            path: "AuditEvent.entity.query"
        },
        "detail": {
            name: "detail",
            dataType: AuditEventEntityDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Tagged value pairs for conveying additional information about the entity.",
            path: "AuditEvent.entity.detail"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.entity.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AuditEventEntity record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept role?;
    r5:Reference what?;
    r5:CodeableConcept[] securityLabel?;
    r5:Extension[] modifierExtension?;
    r5:base64Binary query?;
    AuditEventEntityDetail[] detail?;
    string id?;
|};

# FHIR AuditEventEntityDetail datatype record.
#
# + valueAuditEventPeriod - The value of the extra detail.
# + valueAuditEventBase64Binary - The value of the extra detail.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueAuditEventString - The value of the extra detail.
# + valueAuditEventInteger - The value of the extra detail.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - The type of extra detail provided in the value.
# + valueAuditEventTime - The value of the extra detail.
# + valueAuditEventCodeableConcept - The value of the extra detail.
# + valueAuditEventRange - The value of the extra detail.
# + valueAuditEventDateTime - The value of the extra detail.
# + valueAuditEventBoolean - The value of the extra detail.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueAuditEventRatio - The value of the extra detail.
# + valueAuditEventQuantity - The value of the extra detail.
@r5:DataTypeDefinition {
    name: "AuditEventEntityDetail",
    baseType: (),
    elements: {
        "valueAuditEventPeriod": {
            name: "valueAuditEventPeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventBase64Binary": {
            name: "valueAuditEventBase64Binary",
            dataType: r5:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.entity.detail.extension"
        },
        "valueAuditEventString": {
            name: "valueAuditEventString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventInteger": {
            name: "valueAuditEventInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.entity.detail.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of extra detail provided in the value.",
            path: "AuditEvent.entity.detail.type"
        },
        "valueAuditEventTime": {
            name: "valueAuditEventTime",
            dataType: r5:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventCodeableConcept": {
            name: "valueAuditEventCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventRange": {
            name: "valueAuditEventRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventDateTime": {
            name: "valueAuditEventDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventBoolean": {
            name: "valueAuditEventBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.entity.detail.id"
        },
        "valueAuditEventRatio": {
            name: "valueAuditEventRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "valueAuditEventQuantity": {
            name: "valueAuditEventQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AuditEventEntityDetail record {|
    *r5:BackboneElement;

    r5:Period valueAuditEventPeriod;
    r5:base64Binary valueAuditEventBase64Binary;
    r5:Extension[] extension?;
    string valueAuditEventString;
    r5:integer valueAuditEventInteger;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept 'type;
    r5:time valueAuditEventTime;
    r5:CodeableConcept valueAuditEventCodeableConcept;
    r5:Range valueAuditEventRange;
    r5:dateTime valueAuditEventDateTime;
    boolean valueAuditEventBoolean;
    string id?;
    r5:Ratio valueAuditEventRatio;
    r5:Quantity valueAuditEventQuantity;
|};

# FHIR AuditEventSource datatype record.
#
# + observer - Identifier of the source where the event was detected.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + site - Logical source location within the healthcare enterprise network. For example, a hospital or other provider location within a multi-entity provider group.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Code specifying the type of source where event originated.
@r5:DataTypeDefinition {
    name: "AuditEventSource",
    baseType: (),
    elements: {
        "observer": {
            name: "observer",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Identifier of the source where the event was detected.",
            path: "AuditEvent.source.observer"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.source.extension"
        },
        "site": {
            name: "site",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Logical source location within the healthcare enterprise network. For example, a hospital or other provider location within a multi-entity provider group.",
            path: "AuditEvent.source.site"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.source.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.source.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Code specifying the type of source where event originated.",
            path: "AuditEvent.source.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AuditEventSource record {|
    *r5:BackboneElement;

    r5:Reference observer;
    r5:Extension[] extension?;
    r5:Reference site?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept[] 'type?;
|};

