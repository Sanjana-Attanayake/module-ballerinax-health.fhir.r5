// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_TRANSPORT = "http://hl7.org/fhir/StructureDefinition/Transport";
public const RESOURCE_NAME_TRANSPORT = "Transport";

# FHIR Transport resource record.
#
# + resourceType - The type of the resource describes
# + insurance - Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Transport.
# + note - Free-text information captured about the transport as it progresses.
# + partOf - A larger event of which this particular event is a component or step.
# + reason - A resource reference indicating why this transport needs to be performed.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A name or code (or both) briefly describing what the transport involves.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + for - The entity who benefits from the performance of the service specified in the transport (e.g., the patient).
# + description - A free-text description of what is to be performed.
# + focus - The request being actioned or the resource being manipulated by this transport.
# + language - The base language in which the resource is written.
# + instantiatesUri - The URL pointing to an *externally* maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
# + relevantHistory - Links to Provenance records for past versions of this Transport that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the transport.
# + output - Outputs produced by the Transport.
# + completionTime - Identifies the completion time of the event (the occurrence).
# + statusReason - An explanation as to why this transport is held, failed, was refused, etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + basedOn - BasedOn refers to a higher-level authorization that triggered the creation of the transport. It references a 'request' resource such as a ServiceRequest or Transport, which is distinct from the 'request' resource the Transport is seeking to fulfill. This latter resource is referenced by FocusOn. For example, based on a ServiceRequest (= BasedOn), a transport is created to fulfill a procedureRequest ( = FocusOn ) to transport a specimen to the lab.
# + owner - Individual organization or Device currently responsible for transport execution.
# + requester - The creator of the transport.
# + identifier - Identifier for the transport event that is used to identify it across multiple disparate systems.
# + authoredOn - The date and time this transport was created.
# + requestedLocation - The desired or final location for the transport.
# + encounter - The healthcare event (e.g. a patient and healthcare provider interaction) during which this transport was created.
# + history - The transport event prior to this one.
# + instantiatesCanonical - The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.
# + priority - Indicates how quickly the Transport should be addressed with respect to other requests.
# + intent - Indicates the 'level' of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc.
# + performerType - The kind of participant that should perform the transport.
# + currentLocation - The current location for the entity to be transported.
# + input - Additional information that may be needed in the execution of the transport.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + restriction - If the Transport.focus is a request resource and the transport is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + location - Principal physical location where this transport is performed.
# + lastModified - The date and time of last modification to this transport.
# + groupIdentifier - A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author. The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc. E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.
# + status - A code specifying the state of the transport event.
@r5:ResourceDefinition {
    resourceType: "Transport",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/Transport",
    elements: {
        "insurance" : {
            name: "insurance",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.insurance"
        },
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.note"
        },
        "partOf" : {
            name: "partOf",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.partOf"
        },
        "reason" : {
            name: "reason",
            dataType: r5:CodeableReference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.reason"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.extension"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.code",
            valueSet: "http://hl7.org/fhir/ValueSet/transport-code"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.modifierExtension"
        },
        "for" : {
            name: "for",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.for"
        },
        "description" : {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.description"
        },
        "focus" : {
            name: "focus",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.focus"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "instantiatesUri" : {
            name: "instantiatesUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.instantiatesUri"
        },
        "relevantHistory" : {
            name: "relevantHistory",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.relevantHistory"
        },
        "output" : {
            name: "output",
            dataType: TransportOutput,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.output"
        },
        "completionTime" : {
            name: "completionTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.completionTime"
        },
        "statusReason" : {
            name: "statusReason",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.statusReason",
            valueSet: "http://hl7.org/fhir/ValueSet/transport-status-reason"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.text"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.basedOn"
        },
        "owner" : {
            name: "owner",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.owner"
        },
        "requester" : {
            name: "requester",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.requester"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.identifier"
        },
        "authoredOn" : {
            name: "authoredOn",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.authoredOn"
        },
        "requestedLocation" : {
            name: "requestedLocation",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Transport.requestedLocation"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.encounter"
        },
        "history" : {
            name: "history",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.history"
        },
        "instantiatesCanonical" : {
            name: "instantiatesCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.instantiatesCanonical"
        },
        "priority" : {
            name: "priority",
            dataType: TransportPriority,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.priority",
            valueSet: "http://hl7.org/fhir/ValueSet/request-priority|5.0.0"
        },
        "intent" : {
            name: "intent",
            dataType: TransportIntent,
            min: 1,
            max: 1,
            isArray: false,
            path: "Transport.intent",
            valueSet: "http://hl7.org/fhir/ValueSet/transport-intent|5.0.0"
        },
        "performerType" : {
            name: "performerType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.performerType",
            valueSet: "http://hl7.org/fhir/ValueSet/performer-role"
        },
        "currentLocation" : {
            name: "currentLocation",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Transport.currentLocation"
        },
        "input" : {
            name: "input",
            dataType: TransportInput,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.input"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Transport.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.meta"
        },
        "restriction" : {
            name: "restriction",
            dataType: TransportRestriction,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.restriction"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.implicitRules"
        },
        "location" : {
            name: "location",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.location"
        },
        "lastModified" : {
            name: "lastModified",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.lastModified"
        },
        "groupIdentifier" : {
            name: "groupIdentifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.groupIdentifier"
        },
        "status" : {
            name: "status",
            dataType: TransportStatus,
            min: 0,
            max: 1,
            isArray: false,
            path: "Transport.status",
            valueSet: "http://hl7.org/fhir/ValueSet/transport-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type Transport record {|
    *r5:DomainResource;

    RESOURCE_NAME_TRANSPORT resourceType = RESOURCE_NAME_TRANSPORT;

    r5:Reference[] insurance?;
    r5:Annotation[] note?;
    r5:Reference[] partOf?;
    r5:CodeableReference reason?;
    r5:Extension[] extension?;
    r5:CodeableConcept code?;
    r5:Extension[] modifierExtension?;
    r5:Reference for?;
    string description?;
    r5:Reference focus?;
    r5:code language?;
    r5:uri instantiatesUri?;
    r5:Reference[] relevantHistory?;
    TransportOutput[] output?;
    r5:dateTime completionTime?;
    r5:CodeableConcept statusReason?;
    string id?;
    r5:Narrative text?;
    r5:Reference[] basedOn?;
    r5:Reference owner?;
    r5:Reference requester?;
    r5:Identifier[] identifier?;
    r5:dateTime authoredOn?;
    r5:Reference requestedLocation;
    r5:Reference encounter?;
    r5:Reference history?;
    r5:canonical instantiatesCanonical?;
    TransportPriority priority?;
    TransportIntent intent;
    r5:CodeableConcept[] performerType?;
    r5:Reference currentLocation;
    TransportInput[] input?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    TransportRestriction restriction?;
    r5:uri implicitRules?;
    r5:Reference location?;
    r5:dateTime lastModified?;
    r5:Identifier groupIdentifier?;
    TransportStatus status?;
    r5:Element ...;
|};

# FHIR TransportRestriction datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - Over what time-period is fulfillment sought.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + recipient - For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + repetitions - Indicates the number of times the requested action should occur.
@r5:DataTypeDefinition {
    name: "TransportRestriction",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Transport.restriction.extension"
        },
        "period": {
            name: "period",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Over what time-period is fulfillment sought.",
            path: "Transport.restriction.period"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Transport.restriction.modifierExtension"
        },
        "recipient": {
            name: "recipient",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.",
            path: "Transport.restriction.recipient"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Transport.restriction.id"
        },
        "repetitions": {
            name: "repetitions",
            dataType: r5:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the number of times the requested action should occur.",
            path: "Transport.restriction.repetitions"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TransportRestriction record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Period period?;
    r5:Extension[] modifierExtension?;
    r5:Reference[] recipient?;
    string id?;
    r5:positiveInt repetitions?;
|};

# TransportIntent enum
public enum TransportIntent {
   CODE_INTENT_PROPOSAL = "proposal",
   CODE_INTENT_INSTANCE_ORDER = "instance-order",
   CODE_INTENT_FILLER_ORDER = "filler-order",
   CODE_INTENT_ORIGINAL_ORDER = "original-order",
   CODE_INTENT_REFLEX_ORDER = "reflex-order",
   CODE_INTENT_PLAN = "plan",
   CODE_INTENT_UNKNOWN = "unknown",
   CODE_INTENT_ORDER = "order",
   CODE_INTENT_OPTION = "option"
}

# FHIR TransportInput datatype record.
#
# + valueTime - The value of the input parameter as a basic type.
# + valueTriggerDefinition - The value of the input parameter as a basic type.
# + valueMoney - The value of the input parameter as a basic type.
# + valueSignature - The value of the input parameter as a basic type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - A code or description indicating how the input is intended to be used as part of the transport execution.
# + valueUuid - The value of the input parameter as a basic type.
# + valueRatio - The value of the input parameter as a basic type.
# + valueInteger64 - The value of the input parameter as a basic type.
# + valueParameterDefinition - The value of the input parameter as a basic type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - The value of the input parameter as a basic type.
# + valueUnsignedInt - The value of the input parameter as a basic type.
# + valueQuantity - The value of the input parameter as a basic type.
# + valueCanonical - The value of the input parameter as a basic type.
# + valueCount - The value of the input parameter as a basic type.
# + valueId - The value of the input parameter as a basic type.
# + valueRatioRange - The value of the input parameter as a basic type.
# + valueCode - The value of the input parameter as a basic type.
# + valueAddress - The value of the input parameter as a basic type.
# + valueContactPoint - The value of the input parameter as a basic type.
# + valuePeriod - The value of the input parameter as a basic type.
# + valueSampledData - The value of the input parameter as a basic type.
# + valueTiming - The value of the input parameter as a basic type.
# + valueInstant - The value of the input parameter as a basic type.
# + valueAge - The value of the input parameter as a basic type.
# + valueDosage - The value of the input parameter as a basic type.
# + valueBase64Binary - The value of the input parameter as a basic type.
# + valueBoolean - The value of the input parameter as a basic type.
# + valueCoding - The value of the input parameter as a basic type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueIdentifier - The value of the input parameter as a basic type.
# + valueExpression - The value of the input parameter as a basic type.
# + valueReference - The value of the input parameter as a basic type.
# + valueRange - The value of the input parameter as a basic type.
# + valueUri - The value of the input parameter as a basic type.
# + valueDistance - The value of the input parameter as a basic type.
# + valueUrl - The value of the input parameter as a basic type.
# + valueCodeableReference - The value of the input parameter as a basic type.
# + valueContactDetail - The value of the input parameter as a basic type.
# + valueMeta - The value of the input parameter as a basic type.
# + valueCodeableConcept - The value of the input parameter as a basic type.
# + valueMarkdown - The value of the input parameter as a basic type.
# + valueAttachment - The value of the input parameter as a basic type.
# + valueUsageContext - The value of the input parameter as a basic type.
# + valueDateTime - The value of the input parameter as a basic type.
# + valueHumanName - The value of the input parameter as a basic type.
# + valueRelatedArtifact - The value of the input parameter as a basic type.
# + valueAvailability - The value of the input parameter as a basic type.
# + valueDecimal - The value of the input parameter as a basic type.
# + valueDate - The value of the input parameter as a basic type.
# + valueOid - The value of the input parameter as a basic type.
# + valueExtendedContactDetail - The value of the input parameter as a basic type.
# + valueString - The value of the input parameter as a basic type.
# + valuePositiveInt - The value of the input parameter as a basic type.
# + valueDuration - The value of the input parameter as a basic type.
# + valueDataRequirement - The value of the input parameter as a basic type.
# + valueAnnotation - The value of the input parameter as a basic type.
@r5:DataTypeDefinition {
    name: "TransportInput",
    baseType: (),
    elements: {
        "valueTime": {
            name: "valueTime",
            dataType: r5:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueTriggerDefinition": {
            name: "valueTriggerDefinition",
            dataType: r5:TriggerDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueMoney": {
            name: "valueMoney",
            dataType: r5:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueSignature": {
            name: "valueSignature",
            dataType: r5:Signature,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Transport.input.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code or description indicating how the input is intended to be used as part of the transport execution.",
            path: "Transport.input.type"
        },
        "valueUuid": {
            name: "valueUuid",
            dataType: r5:uuid,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueRatio": {
            name: "valueRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueInteger64": {
            name: "valueInteger64",
            dataType: r5:integer64,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueParameterDefinition": {
            name: "valueParameterDefinition",
            dataType: r5:ParameterDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Transport.input.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueUnsignedInt": {
            name: "valueUnsignedInt",
            dataType: r5:unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueCanonical": {
            name: "valueCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueCount": {
            name: "valueCount",
            dataType: r5:Count,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueId": {
            name: "valueId",
            dataType: r5:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueRatioRange": {
            name: "valueRatioRange",
            dataType: r5:RatioRange,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueCode": {
            name: "valueCode",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueAddress": {
            name: "valueAddress",
            dataType: r5:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueContactPoint": {
            name: "valueContactPoint",
            dataType: r5:ContactPoint,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valuePeriod": {
            name: "valuePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueSampledData": {
            name: "valueSampledData",
            dataType: r5:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueTiming": {
            name: "valueTiming",
            dataType: r5:Timing,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueInstant": {
            name: "valueInstant",
            dataType: r5:instant,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueAge": {
            name: "valueAge",
            dataType: r5:Age,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDosage": {
            name: "valueDosage",
            dataType: r5:Dosage,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r5:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueCoding": {
            name: "valueCoding",
            dataType: r5:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Transport.input.extension"
        },
        "valueIdentifier": {
            name: "valueIdentifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueExpression": {
            name: "valueExpression",
            dataType: r5:Expression,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueReference": {
            name: "valueReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueUri": {
            name: "valueUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDistance": {
            name: "valueDistance",
            dataType: r5:Distance,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueUrl": {
            name: "valueUrl",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueCodeableReference": {
            name: "valueCodeableReference",
            dataType: r5:CodeableReference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueContactDetail": {
            name: "valueContactDetail",
            dataType: r5:ContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueMeta": {
            name: "valueMeta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueUsageContext": {
            name: "valueUsageContext",
            dataType: r5:UsageContext,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueHumanName": {
            name: "valueHumanName",
            dataType: r5:HumanName,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueRelatedArtifact": {
            name: "valueRelatedArtifact",
            dataType: r5:RelatedArtifact,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueAvailability": {
            name: "valueAvailability",
            dataType: r5:Availability,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDate": {
            name: "valueDate",
            dataType: r5:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueOid": {
            name: "valueOid",
            dataType: r5:oid,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueExtendedContactDetail": {
            name: "valueExtendedContactDetail",
            dataType: r5:ExtendedContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valuePositiveInt": {
            name: "valuePositiveInt",
            dataType: r5:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDuration": {
            name: "valueDuration",
            dataType: r5:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueDataRequirement": {
            name: "valueDataRequirement",
            dataType: r5:DataRequirement,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        },
        "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r5:Annotation,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Transport.input.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TransportInput record {|
    *r5:BackboneElement;

    r5:time valueTime;
    r5:TriggerDefinition valueTriggerDefinition;
    r5:Money valueMoney;
    r5:Signature valueSignature;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept 'type;
    r5:uuid valueUuid;
    r5:Ratio valueRatio;
    r5:integer64 valueInteger64;
    r5:ParameterDefinition valueParameterDefinition;
    string id?;
    r5:integer valueInteger;
    r5:unsignedInt valueUnsignedInt;
    r5:Quantity valueQuantity;
    r5:canonical valueCanonical;
    r5:Count valueCount;
    r5:id valueId;
    r5:RatioRange valueRatioRange;
    r5:code valueCode;
    r5:Address valueAddress;
    r5:ContactPoint valueContactPoint;
    r5:Period valuePeriod;
    r5:SampledData valueSampledData;
    r5:Timing valueTiming;
    r5:instant valueInstant;
    r5:Age valueAge;
    r5:Dosage valueDosage;
    r5:base64Binary valueBase64Binary;
    boolean valueBoolean;
    r5:Coding valueCoding;
    r5:Extension[] extension?;
    r5:Identifier valueIdentifier;
    r5:Expression valueExpression;
    r5:Reference valueReference;
    r5:Range valueRange;
    r5:uri valueUri;
    r5:Distance valueDistance;
    r5:urlType valueUrl;
    r5:CodeableReference valueCodeableReference;
    r5:ContactDetail valueContactDetail;
    r5:Meta valueMeta;
    r5:CodeableConcept valueCodeableConcept;
    r5:markdown valueMarkdown;
    r5:Attachment valueAttachment;
    r5:UsageContext valueUsageContext;
    r5:dateTime valueDateTime;
    r5:HumanName valueHumanName;
    r5:RelatedArtifact valueRelatedArtifact;
    r5:Availability valueAvailability;
    decimal valueDecimal;
    r5:date valueDate;
    r5:oid valueOid;
    r5:ExtendedContactDetail valueExtendedContactDetail;
    string valueString;
    r5:positiveInt valuePositiveInt;
    r5:Duration valueDuration;
    r5:DataRequirement valueDataRequirement;
    r5:Annotation valueAnnotation;
|};

# TransportPriority enum
public enum TransportPriority {
   CODE_PRIORITY_STAT = "stat",
   CODE_PRIORITY_ROUTINE = "routine",
   CODE_PRIORITY_URGENT = "urgent",
   CODE_PRIORITY_ASAP = "asap"
}

# TransportStatus enum
public enum TransportStatus {
   CODE_STATUS_CANCELLED = "cancelled",
   CODE_STATUS_COMPLETED = "completed",
   CODE_STATUS_PLANNED = "planned",
   CODE_STATUS_ABANDONED = "abandoned",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_IN_PROGRESS = "in-progress"
}

# FHIR TransportOutput datatype record.
#
# + valueTime - The value of the Output parameter as a basic type.
# + valueTriggerDefinition - The value of the Output parameter as a basic type.
# + valueMoney - The value of the Output parameter as a basic type.
# + valueSignature - The value of the Output parameter as a basic type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - The name of the Output parameter.
# + valueUuid - The value of the Output parameter as a basic type.
# + valueRatio - The value of the Output parameter as a basic type.
# + valueInteger64 - The value of the Output parameter as a basic type.
# + valueParameterDefinition - The value of the Output parameter as a basic type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - The value of the Output parameter as a basic type.
# + valueUnsignedInt - The value of the Output parameter as a basic type.
# + valueQuantity - The value of the Output parameter as a basic type.
# + valueCanonical - The value of the Output parameter as a basic type.
# + valueCount - The value of the Output parameter as a basic type.
# + valueId - The value of the Output parameter as a basic type.
# + valueRatioRange - The value of the Output parameter as a basic type.
# + valueCode - The value of the Output parameter as a basic type.
# + valueAddress - The value of the Output parameter as a basic type.
# + valueContactPoint - The value of the Output parameter as a basic type.
# + valuePeriod - The value of the Output parameter as a basic type.
# + valueSampledData - The value of the Output parameter as a basic type.
# + valueTiming - The value of the Output parameter as a basic type.
# + valueInstant - The value of the Output parameter as a basic type.
# + valueAge - The value of the Output parameter as a basic type.
# + valueDosage - The value of the Output parameter as a basic type.
# + valueBase64Binary - The value of the Output parameter as a basic type.
# + valueBoolean - The value of the Output parameter as a basic type.
# + valueCoding - The value of the Output parameter as a basic type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueIdentifier - The value of the Output parameter as a basic type.
# + valueExpression - The value of the Output parameter as a basic type.
# + valueReference - The value of the Output parameter as a basic type.
# + valueRange - The value of the Output parameter as a basic type.
# + valueUri - The value of the Output parameter as a basic type.
# + valueDistance - The value of the Output parameter as a basic type.
# + valueUrl - The value of the Output parameter as a basic type.
# + valueCodeableReference - The value of the Output parameter as a basic type.
# + valueContactDetail - The value of the Output parameter as a basic type.
# + valueMeta - The value of the Output parameter as a basic type.
# + valueCodeableConcept - The value of the Output parameter as a basic type.
# + valueMarkdown - The value of the Output parameter as a basic type.
# + valueAttachment - The value of the Output parameter as a basic type.
# + valueUsageContext - The value of the Output parameter as a basic type.
# + valueDateTime - The value of the Output parameter as a basic type.
# + valueHumanName - The value of the Output parameter as a basic type.
# + valueRelatedArtifact - The value of the Output parameter as a basic type.
# + valueAvailability - The value of the Output parameter as a basic type.
# + valueDecimal - The value of the Output parameter as a basic type.
# + valueDate - The value of the Output parameter as a basic type.
# + valueOid - The value of the Output parameter as a basic type.
# + valueExtendedContactDetail - The value of the Output parameter as a basic type.
# + valueString - The value of the Output parameter as a basic type.
# + valuePositiveInt - The value of the Output parameter as a basic type.
# + valueDuration - The value of the Output parameter as a basic type.
# + valueDataRequirement - The value of the Output parameter as a basic type.
# + valueAnnotation - The value of the Output parameter as a basic type.
@r5:DataTypeDefinition {
    name: "TransportOutput",
    baseType: (),
    elements: {
        "valueTime": {
            name: "valueTime",
            dataType: r5:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueTriggerDefinition": {
            name: "valueTriggerDefinition",
            dataType: r5:TriggerDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueMoney": {
            name: "valueMoney",
            dataType: r5:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueSignature": {
            name: "valueSignature",
            dataType: r5:Signature,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Transport.output.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the Output parameter.",
            path: "Transport.output.type"
        },
        "valueUuid": {
            name: "valueUuid",
            dataType: r5:uuid,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueRatio": {
            name: "valueRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueInteger64": {
            name: "valueInteger64",
            dataType: r5:integer64,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueParameterDefinition": {
            name: "valueParameterDefinition",
            dataType: r5:ParameterDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Transport.output.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueUnsignedInt": {
            name: "valueUnsignedInt",
            dataType: r5:unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueCanonical": {
            name: "valueCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueCount": {
            name: "valueCount",
            dataType: r5:Count,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueId": {
            name: "valueId",
            dataType: r5:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueRatioRange": {
            name: "valueRatioRange",
            dataType: r5:RatioRange,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueCode": {
            name: "valueCode",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueAddress": {
            name: "valueAddress",
            dataType: r5:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueContactPoint": {
            name: "valueContactPoint",
            dataType: r5:ContactPoint,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valuePeriod": {
            name: "valuePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueSampledData": {
            name: "valueSampledData",
            dataType: r5:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueTiming": {
            name: "valueTiming",
            dataType: r5:Timing,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueInstant": {
            name: "valueInstant",
            dataType: r5:instant,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueAge": {
            name: "valueAge",
            dataType: r5:Age,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDosage": {
            name: "valueDosage",
            dataType: r5:Dosage,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r5:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueCoding": {
            name: "valueCoding",
            dataType: r5:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Transport.output.extension"
        },
        "valueIdentifier": {
            name: "valueIdentifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueExpression": {
            name: "valueExpression",
            dataType: r5:Expression,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueReference": {
            name: "valueReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueUri": {
            name: "valueUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDistance": {
            name: "valueDistance",
            dataType: r5:Distance,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueUrl": {
            name: "valueUrl",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueCodeableReference": {
            name: "valueCodeableReference",
            dataType: r5:CodeableReference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueContactDetail": {
            name: "valueContactDetail",
            dataType: r5:ContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueMeta": {
            name: "valueMeta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueUsageContext": {
            name: "valueUsageContext",
            dataType: r5:UsageContext,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueHumanName": {
            name: "valueHumanName",
            dataType: r5:HumanName,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueRelatedArtifact": {
            name: "valueRelatedArtifact",
            dataType: r5:RelatedArtifact,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueAvailability": {
            name: "valueAvailability",
            dataType: r5:Availability,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDate": {
            name: "valueDate",
            dataType: r5:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueOid": {
            name: "valueOid",
            dataType: r5:oid,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueExtendedContactDetail": {
            name: "valueExtendedContactDetail",
            dataType: r5:ExtendedContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valuePositiveInt": {
            name: "valuePositiveInt",
            dataType: r5:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDuration": {
            name: "valueDuration",
            dataType: r5:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueDataRequirement": {
            name: "valueDataRequirement",
            dataType: r5:DataRequirement,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        },
        "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r5:Annotation,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Transport.output.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TransportOutput record {|
    *r5:BackboneElement;

    r5:time valueTime;
    r5:TriggerDefinition valueTriggerDefinition;
    r5:Money valueMoney;
    r5:Signature valueSignature;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept 'type;
    r5:uuid valueUuid;
    r5:Ratio valueRatio;
    r5:integer64 valueInteger64;
    r5:ParameterDefinition valueParameterDefinition;
    string id?;
    r5:integer valueInteger;
    r5:unsignedInt valueUnsignedInt;
    r5:Quantity valueQuantity;
    r5:canonical valueCanonical;
    r5:Count valueCount;
    r5:id valueId;
    r5:RatioRange valueRatioRange;
    r5:code valueCode;
    r5:Address valueAddress;
    r5:ContactPoint valueContactPoint;
    r5:Period valuePeriod;
    r5:SampledData valueSampledData;
    r5:Timing valueTiming;
    r5:instant valueInstant;
    r5:Age valueAge;
    r5:Dosage valueDosage;
    r5:base64Binary valueBase64Binary;
    boolean valueBoolean;
    r5:Coding valueCoding;
    r5:Extension[] extension?;
    r5:Identifier valueIdentifier;
    r5:Expression valueExpression;
    r5:Reference valueReference;
    r5:Range valueRange;
    r5:uri valueUri;
    r5:Distance valueDistance;
    r5:urlType valueUrl;
    r5:CodeableReference valueCodeableReference;
    r5:ContactDetail valueContactDetail;
    r5:Meta valueMeta;
    r5:CodeableConcept valueCodeableConcept;
    r5:markdown valueMarkdown;
    r5:Attachment valueAttachment;
    r5:UsageContext valueUsageContext;
    r5:dateTime valueDateTime;
    r5:HumanName valueHumanName;
    r5:RelatedArtifact valueRelatedArtifact;
    r5:Availability valueAvailability;
    decimal valueDecimal;
    r5:date valueDate;
    r5:oid valueOid;
    r5:ExtendedContactDetail valueExtendedContactDetail;
    string valueString;
    r5:positiveInt valuePositiveInt;
    r5:Duration valueDuration;
    r5:DataRequirement valueDataRequirement;
    r5:Annotation valueAnnotation;
|};

