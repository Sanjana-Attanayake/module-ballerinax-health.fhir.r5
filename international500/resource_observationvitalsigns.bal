// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_OBSERVATIONVITALSIGNS = "http://hl7.org/fhir/StructureDefinition/vitalsigns";
public const RESOURCE_NAME_OBSERVATIONVITALSIGNS = "Observation";

# FHIR Observationvitalsigns resource record.
#
# + resourceType - The type of the resource describes
# + dataAbsentReason - Provides a reason why the expected value in the element Observation.value[x] is missing.
# + instantiatesReference - The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance.
# + partOf - A larger event of which this particular Observation is a component or step. For example, an observation as part of a procedure.
# + valueTime - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + subject - The patient, or group of patients, location, device, organization, procedure or practitioner this observation is about and into whose or what record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record. The focus of an observation could also be an existing condition, an intervention, the subject's diet, another observation of the subject, or a body structure such as tumor or implanted device. An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
# + language - The base language in which the resource is written.
# + valueRatio - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + issued - The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
# + valueInteger - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + valueQuantity - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + identifier - A unique identifier assigned to this observation.
# + effectivePeriod - Often just a dateTime for Vital Signs.
# + method - Indicates the mechanism used to perform the observation.
# + instantiatesCanonical - The reference to a FHIR ObservationDefinition resource that provides the definition that is adhered to in whole or in part by this Observation instance.
# + referenceRange - Guidance on how to interpret the value by comparison to a normal or recommended range. Multiple reference ranges are interpreted as an 'OR'. In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
# + interpretation - A categorical assessment of an observation value. For example, high, low, normal.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + valueSampledData - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + valuePeriod - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + bodyStructure - Indicates the body structure on the subject's body where the observation was made (i.e. the target site).
# + device - A reference to the device that generates the measurements or the device settings for the device.
# + status - The status of the result value.
# + valueBoolean - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + note - Comments about the observation or the results.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Coded Responses from C-CDA Vital Sign Results.
# + valueReference - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + valueRange - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + valueCodeableConcept - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + valueAttachment - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + specimen - The specimen that was used when this observation was made.
# + derivedFrom - The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
# + valueDateTime - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + basedOn - A plan, proposal or order that is fulfilled in whole or in part by this event. For example, a MedicationRequest may require a patient to have laboratory test performed before it is dispensed.
# + performer - Who was responsible for asserting the observed value as 'true'.
# + hasMember - Used when reporting vital signs panel components.
# + encounter - The healthcare event (e.g. a patient and healthcare provider interaction) during which this observation is made.
# + bodySite - Indicates the site on the subject's body where the observation was made (i.e. the target site).
# + component - Used when reporting systolic and diastolic blood pressure.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + valueString - Vital Signs value are recorded using the Quantity data type. For supporting observations such as Cuff size could use other datatypes such as CodeableConcept.
# + effectiveDateTime - Often just a dateTime for Vital Signs.
# + category - A code that classifies the general type of observation being made.
# * category Slicings
# 1) ObservationvitalsignsCategoryVSCat: Classification of type of observation
#       - min = 1
#       - max = 1
#
# + triggeredBy - Identifies the observation(s) that triggered the performance of this observation.
@r5:ResourceDefinition {
    resourceType: "Observation",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/vitalsigns",
    elements: {
        "dataAbsentReason" : {
            name: "dataAbsentReason",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.dataAbsentReason",
            valueSet: "http://hl7.org/fhir/ValueSet/data-absent-reason"
        },
        "instantiatesReference" : {
            name: "instantiatesReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.instantiates[x]"
        },
        "partOf" : {
            name: "partOf",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.partOf"
        },
        "valueTime" : {
            name: "valueTime",
            dataType: r5:time,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "subject" : {
            name: "subject",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Observation.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.modifierExtension"
        },
        "focus" : {
            name: "focus",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.focus"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "valueRatio" : {
            name: "valueRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.text"
        },
        "issued" : {
            name: "issued",
            dataType: r5:instant,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.issued"
        },
        "valueInteger" : {
            name: "valueInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "valueQuantity" : {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.identifier"
        },
        "effectivePeriod" : {
            name: "effectivePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.effective[x]"
        },
        "method" : {
            name: "method",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.method",
            valueSet: "http://hl7.org/fhir/ValueSet/observation-methods"
        },
        "instantiatesCanonical" : {
            name: "instantiatesCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.instantiates[x]"
        },
        "referenceRange" : {
            name: "referenceRange",
            dataType: ObservationvitalsignsReferenceRange,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.referenceRange"
        },
        "interpretation" : {
            name: "interpretation",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.interpretation",
            valueSet: "http://hl7.org/fhir/ValueSet/observation-interpretation"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.meta"
        },
        "valueSampledData" : {
            name: "valueSampledData",
            dataType: r5:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "valuePeriod" : {
            name: "valuePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.implicitRules"
        },
        "bodyStructure" : {
            name: "bodyStructure",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.bodyStructure"
        },
        "device" : {
            name: "device",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.device"
        },
        "status" : {
            name: "status",
            dataType: ObservationvitalsignsStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Observation.status",
            valueSet: "http://hl7.org/fhir/ValueSet/observation-status"
        },
        "valueBoolean" : {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.note"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.extension"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            path: "Observation.code",
            valueSet: "http://hl7.org/fhir/ValueSet/observation-vitalsignresult"
        },
        "valueReference" : {
            name: "valueReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "valueRange" : {
            name: "valueRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "valueCodeableConcept" : {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "valueAttachment" : {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "specimen" : {
            name: "specimen",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.specimen"
        },
        "derivedFrom" : {
            name: "derivedFrom",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.derivedFrom"
        },
        "valueDateTime" : {
            name: "valueDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.basedOn"
        },
        "performer" : {
            name: "performer",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.performer"
        },
        "hasMember" : {
            name: "hasMember",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.hasMember"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.encounter"
        },
        "bodySite" : {
            name: "bodySite",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.bodySite",
            valueSet: "http://hl7.org/fhir/ValueSet/body-site"
        },
        "component" : {
            name: "component",
            dataType: ObservationvitalsignsComponent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.component"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.contained"
        },
        "valueString" : {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.value[x]"
        },
        "effectiveDateTime" : {
            name: "effectiveDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Observation.effective[x]"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.category",
            valueSet: "http://hl7.org/fhir/ValueSet/observation-category"
        },
        "triggeredBy" : {
            name: "triggeredBy",
            dataType: ObservationvitalsignsTriggeredBy,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Observation.triggeredBy"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type Observationvitalsigns record {|
    *r5:DomainResource;

    RESOURCE_NAME_OBSERVATIONVITALSIGNS resourceType = RESOURCE_NAME_OBSERVATIONVITALSIGNS;

    r5:CodeableConcept dataAbsentReason?;
    r5:Reference instantiatesReference?;
    r5:Reference[] partOf?;
    r5:time valueTime?;
    r5:Reference subject;
    r5:Extension[] modifierExtension?;
    r5:Reference[] focus?;
    r5:code language?;
    r5:Ratio valueRatio?;
    string id?;
    r5:Narrative text?;
    r5:instant issued?;
    r5:integer valueInteger?;
    r5:Quantity valueQuantity?;
    r5:Identifier[] identifier?;
    r5:Period effectivePeriod;
    r5:CodeableConcept method?;
    r5:canonical instantiatesCanonical?;
    ObservationvitalsignsReferenceRange[] referenceRange?;
    r5:CodeableConcept[] interpretation?;
    r5:Meta meta?;
    r5:SampledData valueSampledData?;
    r5:Period valuePeriod?;
    r5:uri implicitRules?;
    r5:Reference bodyStructure?;
    r5:Reference device?;
    ObservationvitalsignsStatus status;
    boolean valueBoolean?;
    r5:Annotation[] note?;
    r5:Extension[] extension?;
    r5:CodeableConcept code;
    r5:Reference valueReference?;
    r5:Range valueRange?;
    r5:CodeableConcept valueCodeableConcept?;
    r5:Attachment valueAttachment?;
    r5:Reference specimen?;
    r5:Reference[] derivedFrom?;
    r5:dateTime valueDateTime?;
    r5:Reference[] basedOn?;
    r5:Reference[] performer?;
    r5:Reference[] hasMember?;
    r5:Reference encounter?;
    r5:CodeableConcept bodySite?;
    ObservationvitalsignsComponent[] component?;
    r5:Resource[] contained?;
    string valueString?;
    r5:dateTime effectiveDateTime;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Observation.category constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Observation.category constraint. This field must be an array containing at most one item."
        }
    }
    r5:CodeableConcept[] category;
    ObservationvitalsignsTriggeredBy[] triggeredBy?;
    r5:Element ...;
|};

# ObservationvitalsignsTriggeredByType enum
public enum ObservationvitalsignsTriggeredByType {
   CODE_TYPE_REPEAT = "repeat",
   CODE_TYPE_REFLEX = "reflex",
   CODE_TYPE_RE_RUN = "re-run"
}

# FHIR ObservationvitalsignsReferenceRange datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + high - The value of the high bound of the reference range. The high bound of the reference range endpoint is inclusive of the value (e.g. reference range is >=5 - <=9). If the high bound is omitted, it is assumed to be meaningless (e.g. reference range is >= 2.3).
# + low - The value of the low bound of the reference range. The low bound of the reference range endpoint is inclusive of the value (e.g. reference range is >=5 - <=9). If the low bound is omitted, it is assumed to be meaningless (e.g. reference range is <=2.3).
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + appliesTo - Codes to indicate the target population this reference range applies to. For example, a reference range may be based on the normal population or a particular sex or race. Multiple `appliesTo` are interpreted as an 'AND' of the target populations. For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation. An example would be a reference value of 'Negative' or a list or table of 'normals'.
# + 'type - Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
# + normalValue - The value of the normal value of the reference range.
# + age - The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
@r5:DataTypeDefinition {
    name: "ObservationvitalsignsReferenceRange",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Observation.referenceRange.extension"
        },
        "high": {
            name: "high",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the high bound of the reference range. The high bound of the reference range endpoint is inclusive of the value (e.g. reference range is >=5 - <=9). If the high bound is omitted, it is assumed to be meaningless (e.g. reference range is >= 2.3).",
            path: "Observation.referenceRange.high"
        },
        "low": {
            name: "low",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the low bound of the reference range. The low bound of the reference range endpoint is inclusive of the value (e.g. reference range is >=5 - <=9). If the low bound is omitted, it is assumed to be meaningless (e.g. reference range is <=2.3).",
            path: "Observation.referenceRange.low"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Observation.referenceRange.modifierExtension"
        },
        "appliesTo": {
            name: "appliesTo",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Codes to indicate the target population this reference range applies to. For example, a reference range may be based on the normal population or a particular sex or race. Multiple `appliesTo` are interpreted as an 'AND' of the target populations. For example, to represent a target population of African American females, both a code of female and a code for African American would be used.",
            path: "Observation.referenceRange.appliesTo"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Observation.referenceRange.id"
        },
        "text": {
            name: "text",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation. An example would be a reference value of 'Negative' or a list or table of 'normals'.",
            path: "Observation.referenceRange.text"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.",
            path: "Observation.referenceRange.type"
        },
        "normalValue": {
            name: "normalValue",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the normal value of the reference range.",
            path: "Observation.referenceRange.normalValue"
        },
        "age": {
            name: "age",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.",
            path: "Observation.referenceRange.age"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ObservationvitalsignsReferenceRange record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Quantity high?;
    r5:Quantity low?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept[] appliesTo?;
    string id?;
    r5:markdown text?;
    r5:CodeableConcept 'type?;
    r5:CodeableConcept normalValue?;
    r5:Range age?;
|};

# FHIR ObservationvitalsignsCategoryCoding datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + userSelected - Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
# + display - A representation of the meaning of the code in the system, following the rules of the system.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'version - The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
@r5:DataTypeDefinition {
    name: "ObservationvitalsignsCategoryCoding",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Observation.category.coding.extension"
        },
        "code": {
            name: "code",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Observation.category.coding.code"
        },
        "system": {
            name: "system",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Observation.category.coding.system"
        },
        "userSelected": {
            name: "userSelected",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
            path: "Observation.category.coding.userSelected"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A representation of the meaning of the code in the system, following the rules of the system.",
            path: "Observation.category.coding.display"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Observation.category.coding.id"
        },
        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
            path: "Observation.category.coding.version"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ObservationvitalsignsCategoryCoding record {|
    *r5:Coding;

    r5:Extension[] extension?;
    r5:code code = "vital-signs";
    r5:uri system = "http://terminology.hl7.org/CodeSystem/observation-category";
    boolean userSelected?;
    string display?;
    string id?;
    string 'version?;
|};

# FHIR ObservationvitalsignsTriggeredBy datatype record.
#
# + reason - Provides the reason why this observation was performed as a result of the observation(s) referenced.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + observation - Reference to the triggering observation.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of trigger. Reflex | Repeat | Re-run.
@r5:DataTypeDefinition {
    name: "ObservationvitalsignsTriggeredBy",
    baseType: (),
    elements: {
        "reason": {
            name: "reason",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Provides the reason why this observation was performed as a result of the observation(s) referenced.",
            path: "Observation.triggeredBy.reason"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Observation.triggeredBy.extension"
        },
        "observation": {
            name: "observation",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Reference to the triggering observation.",
            path: "Observation.triggeredBy.observation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Observation.triggeredBy.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Observation.triggeredBy.id"
        },
        "type": {
            name: "type",
            dataType: ObservationvitalsignsTriggeredByType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of trigger. Reflex | Repeat | Re-run.",
            path: "Observation.triggeredBy.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ObservationvitalsignsTriggeredBy record {|
    *r5:BackboneElement;

    string reason?;
    r5:Extension[] extension?;
    r5:Reference observation;
    r5:Extension[] modifierExtension?;
    string id?;
    ObservationvitalsignsTriggeredByType 'type;
|};

# ObservationvitalsignsStatus enum
public enum ObservationvitalsignsStatus {
   CODE_STATUS_AMENDED = "amended",
   CODE_STATUS_FINAL = "final",
   CODE_STATUS_REGISTERED = "registered",
   CODE_STATUS_PRELIMINARY = "preliminary"
}

# FHIR ObservationvitalsignsComponent datatype record.
#
# + valueBoolean - Vital Sign Value.
# + dataAbsentReason - Provides a reason why the expected value in the element Observation.component.value[x] is missing.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueTime - Vital Sign Value.
# + code - Describes what was observed. Sometimes this is called the observation 'code'.
# + valueReference - Vital Sign Value.
# + valueRange - Vital Sign Value.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valueCodeableConcept - Vital Sign Value.
# + valueRatio - Vital Sign Value.
# + valueAttachment - Vital Sign Value.
# + valueString - Vital Sign Value.
# + interpretation - A categorical assessment of an observation value. For example, high, low, normal.
# + valueSampledData - Vital Sign Value.
# + valuePeriod - Vital Sign Value.
# + valueDateTime - Vital Sign Value.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - Vital Sign Value.
# + valueQuantity - Vital Sign Value.
@r5:DataTypeDefinition {
    name: "ObservationvitalsignsComponent",
    baseType: (),
    elements: {
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "dataAbsentReason": {
            name: "dataAbsentReason",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Provides a reason why the expected value in the element Observation.component.value[x] is missing.",
            path: "Observation.component.dataAbsentReason"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Observation.component.extension"
        },
        "valueTime": {
            name: "valueTime",
            dataType: r5:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Describes what was observed. Sometimes this is called the observation 'code'.",
            path: "Observation.component.code"
        },
        "valueReference": {
            name: "valueReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Observation.component.modifierExtension"
        },
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valueRatio": {
            name: "valueRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "interpretation": {
            name: "interpretation",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A categorical assessment of an observation value. For example, high, low, normal.",
            path: "Observation.component.interpretation"
        },
        "valueSampledData": {
            name: "valueSampledData",
            dataType: r5:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valuePeriod": {
            name: "valuePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Observation.component.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Vital Sign Value.",
            path: "Observation.component.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ObservationvitalsignsComponent record {|
    *r5:BackboneElement;

    boolean valueBoolean?;
    r5:CodeableConcept dataAbsentReason?;
    r5:Extension[] extension?;
    r5:time valueTime?;
    r5:CodeableConcept code;
    r5:Reference valueReference?;
    r5:Range valueRange?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept valueCodeableConcept?;
    r5:Ratio valueRatio?;
    r5:Attachment valueAttachment?;
    string valueString?;
    r5:CodeableConcept[] interpretation?;
    r5:SampledData valueSampledData?;
    r5:Period valuePeriod?;
    r5:dateTime valueDateTime?;
    string id?;
    r5:integer valueInteger?;
    r5:Quantity valueQuantity?;
|};

# FHIR ObservationvitalsignsCategoryVSCat datatype record.
#
# + coding - A reference to a code defined by a terminology system.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
@r5:DataTypeDefinition {
    name: "ObservationvitalsignsCategoryVSCat",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: ObservationvitalsignsCategoryCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Observation.category.coding"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Observation.category.extension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Observation.category.id"
        },
        "text": {
            name: "text",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
            path: "Observation.category.text"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ObservationvitalsignsCategoryVSCat record {|
    *r5:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Observation.category.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Observation.category.coding constraint. This field must be an array containing at most one item."
        }
    }
    ObservationvitalsignsCategoryCoding[] coding;
    r5:Extension[] extension?;
    string id?;
    string text?;
|};

