// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_DEVICEDEFINITION = "http://hl7.org/fhir/StructureDefinition/DeviceDefinition";
public const RESOURCE_NAME_DEVICEDEFINITION = "DeviceDefinition";

# FHIR DeviceDefinition resource record.
#
# + resourceType - The type of the resource describes
# + note - Descriptive information, usage information or implantation information that is not captured in an existing element.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + link - An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
# + regulatoryIdentifier - Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe.
# + description - Additional information to describe the device.
# + language - The base language in which the resource is written.
# + deviceName - The name or names of the device as given by the manufacturer.
# + manufacturer - A name of the manufacturer or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.
# + shelfLifeStorage - Shelf Life and storage information.
# + safety - Safety characteristics of the device.
# + contact - Contact details for an organization or a particular human that is responsible for the device.
# + property - Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + owner - An organization that is responsible for the provision and ongoing maintenance of the device.
# + identifier - Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier. However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
# + hasPart - A device that is part (for example a component) of the present device.
# + chargeItem - Billing code or reference associated with the device.
# + packaging - Information about the packaging of the device, i.e. how the device is packaged.
# + classification - What kind of device or device system this is.
# + languageCode - Language code for the human-readable text strings produced by the device (all supported).
# + productionIdentifierInUDI - Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
# + 'version - The version of the device or software.
# + udiDeviceIdentifier - Unique device identifier (UDI) assigned to device label or package. Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + material - A substance used to create the material(s) of which the device is made.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + guideline - Information aimed at providing directions for the usage of this model of device.
# + correctiveAction - Tracking of latest field safety corrective action.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + modelNumber - The model number for the device for example as defined by the manufacturer or labeler, or other agency.
# + partNumber - The part number or catalog number of the device.
# + conformsTo - Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
@r5:ResourceDefinition {
    resourceType: "DeviceDefinition",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
    elements: {
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.note"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.extension"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.modifierExtension"
        },
        "link" : {
            name: "link",
            dataType: DeviceDefinitionLink,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.link"
        },
        "regulatoryIdentifier" : {
            name: "regulatoryIdentifier",
            dataType: DeviceDefinitionRegulatoryIdentifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.regulatoryIdentifier"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.description"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "deviceName" : {
            name: "deviceName",
            dataType: DeviceDefinitionDeviceName,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.deviceName"
        },
        "manufacturer" : {
            name: "manufacturer",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.manufacturer"
        },
        "shelfLifeStorage" : {
            name: "shelfLifeStorage",
            dataType: r5:ProductShelfLife,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.shelfLifeStorage"
        },
        "safety" : {
            name: "safety",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.safety",
            valueSet: "http://hl7.org/fhir/ValueSet/device-safety"
        },
        "contact" : {
            name: "contact",
            dataType: r5:ContactPoint,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.contact"
        },
        "property" : {
            name: "property",
            dataType: DeviceDefinitionProperty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.property"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.text"
        },
        "owner" : {
            name: "owner",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.owner"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.identifier"
        },
        "hasPart" : {
            name: "hasPart",
            dataType: DeviceDefinitionHasPart,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.hasPart"
        },
        "chargeItem" : {
            name: "chargeItem",
            dataType: DeviceDefinitionChargeItem,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.chargeItem"
        },
        "packaging" : {
            name: "packaging",
            dataType: DeviceDefinitionPackaging,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.packaging"
        },
        "classification" : {
            name: "classification",
            dataType: DeviceDefinitionClassification,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.classification"
        },
        "languageCode" : {
            name: "languageCode",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.languageCode"
        },
        "productionIdentifierInUDI" : {
            name: "productionIdentifierInUDI",
            dataType: DeviceDefinitionProductionIdentifierInUDI,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.productionIdentifierInUDI",
            valueSet: "http://hl7.org/fhir/ValueSet/device-productidentifierinudi|5.0.0"
        },
        "version" : {
            name: "version",
            dataType: DeviceDefinitionVersion,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.version"
        },
        "udiDeviceIdentifier" : {
            name: "udiDeviceIdentifier",
            dataType: DeviceDefinitionUdiDeviceIdentifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.udiDeviceIdentifier"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.contained"
        },
        "material" : {
            name: "material",
            dataType: DeviceDefinitionMaterial,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.material"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.meta"
        },
        "guideline" : {
            name: "guideline",
            dataType: DeviceDefinitionGuideline,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.guideline"
        },
        "correctiveAction" : {
            name: "correctiveAction",
            dataType: DeviceDefinitionCorrectiveAction,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.correctiveAction"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.implicitRules"
        },
        "modelNumber" : {
            name: "modelNumber",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.modelNumber"
        },
        "partNumber" : {
            name: "partNumber",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.partNumber"
        },
        "conformsTo" : {
            name: "conformsTo",
            dataType: DeviceDefinitionConformsTo,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.conformsTo"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type DeviceDefinition record {|
    *r5:DomainResource;

    RESOURCE_NAME_DEVICEDEFINITION resourceType = RESOURCE_NAME_DEVICEDEFINITION;

    r5:Annotation[] note?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    DeviceDefinitionLink[] link?;
    DeviceDefinitionRegulatoryIdentifier[] regulatoryIdentifier?;
    r5:markdown description?;
    r5:code language?;
    DeviceDefinitionDeviceName[] deviceName?;
    r5:Reference manufacturer?;
    r5:ProductShelfLife[] shelfLifeStorage?;
    r5:CodeableConcept[] safety?;
    r5:ContactPoint[] contact?;
    DeviceDefinitionProperty[] property?;
    string id?;
    r5:Narrative text?;
    r5:Reference owner?;
    r5:Identifier[] identifier?;
    DeviceDefinitionHasPart[] hasPart?;
    DeviceDefinitionChargeItem[] chargeItem?;
    DeviceDefinitionPackaging[] packaging?;
    DeviceDefinitionClassification[] classification?;
    r5:CodeableConcept[] languageCode?;
    DeviceDefinitionProductionIdentifierInUDI[] productionIdentifierInUDI?;
    DeviceDefinitionVersion[] 'version?;
    DeviceDefinitionUdiDeviceIdentifier[] udiDeviceIdentifier?;
    r5:Resource[] contained?;
    DeviceDefinitionMaterial[] material?;
    r5:Meta meta?;
    DeviceDefinitionGuideline guideline?;
    DeviceDefinitionCorrectiveAction correctiveAction?;
    r5:uri implicitRules?;
    string modelNumber?;
    string partNumber?;
    DeviceDefinitionConformsTo[] conformsTo?;
    r5:Element ...;
|};

# FHIR DeviceDefinitionMaterial datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + substance - A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.
# + alternate - Indicates an alternative material of the device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + allergenicIndicator - Whether the substance is a known or suspected allergen.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionMaterial",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.material.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.material.modifierExtension"
        },
        "substance": {
            name: "substance",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.",
            path: "DeviceDefinition.material.substance"
        },
        "alternate": {
            name: "alternate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates an alternative material of the device.",
            path: "DeviceDefinition.material.alternate"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.material.id"
        },
        "allergenicIndicator": {
            name: "allergenicIndicator",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the substance is a known or suspected allergen.",
            path: "DeviceDefinition.material.allergenicIndicator"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionMaterial record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept substance;
    boolean alternate?;
    string id?;
    boolean allergenicIndicator?;
|};

# FHIR DeviceDefinitionGuideline datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + relatedArtifact - A source of information or reference for this guideline.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + intendedUse - A description of the general purpose or medical use of the device or its function.
# + usageInstruction - Detailed written and visual directions for the user on how to use the device.
# + warning - Specific hazard alert information that a user needs to know before using the device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + indication - A clinical condition for which the device was designed to be used.
# + useContext - The circumstances that form the setting for using the device.
# + contraindication - A specific situation when a device should not be used because it may cause harm.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionGuideline",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.guideline.extension"
        },
        "relatedArtifact": {
            name: "relatedArtifact",
            dataType: r5:RelatedArtifact,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A source of information or reference for this guideline.",
            path: "DeviceDefinition.guideline.relatedArtifact"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.guideline.modifierExtension"
        },
        "intendedUse": {
            name: "intendedUse",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A description of the general purpose or medical use of the device or its function.",
            path: "DeviceDefinition.guideline.intendedUse"
        },
        "usageInstruction": {
            name: "usageInstruction",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Detailed written and visual directions for the user on how to use the device.",
            path: "DeviceDefinition.guideline.usageInstruction"
        },
        "warning": {
            name: "warning",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Specific hazard alert information that a user needs to know before using the device.",
            path: "DeviceDefinition.guideline.warning"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.guideline.id"
        },
        "indication": {
            name: "indication",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A clinical condition for which the device was designed to be used.",
            path: "DeviceDefinition.guideline.indication"
        },
        "useContext": {
            name: "useContext",
            dataType: r5:UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The circumstances that form the setting for using the device.",
            path: "DeviceDefinition.guideline.useContext"
        },
        "contraindication": {
            name: "contraindication",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A specific situation when a device should not be used because it may cause harm.",
            path: "DeviceDefinition.guideline.contraindication"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionGuideline record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:RelatedArtifact[] relatedArtifact?;
    r5:Extension[] modifierExtension?;
    string intendedUse?;
    r5:markdown usageInstruction?;
    r5:CodeableConcept[] warning?;
    string id?;
    r5:CodeableConcept[] indication?;
    r5:UsageContext[] useContext?;
    r5:CodeableConcept[] contraindication?;
|};

# FHIR DeviceDefinitionChargeItem datatype record.
#
# + chargeItemCode - The code or reference for the charge item.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + effectivePeriod - A specific time period in which this charge item applies.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + count - Coefficient applicable to the billing code.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + useContext - The context to which this charge item applies.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionChargeItem",
    baseType: (),
    elements: {
        "chargeItemCode": {
            name: "chargeItemCode",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The code or reference for the charge item.",
            path: "DeviceDefinition.chargeItem.chargeItemCode"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.chargeItem.extension"
        },
        "effectivePeriod": {
            name: "effectivePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "A specific time period in which this charge item applies.",
            path: "DeviceDefinition.chargeItem.effectivePeriod"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.chargeItem.modifierExtension"
        },
        "count": {
            name: "count",
            dataType: r5:Quantity,
            min: 1,
            max: 1,
            isArray: false,
            description: "Coefficient applicable to the billing code.",
            path: "DeviceDefinition.chargeItem.count"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.chargeItem.id"
        },
        "useContext": {
            name: "useContext",
            dataType: r5:UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The context to which this charge item applies.",
            path: "DeviceDefinition.chargeItem.useContext"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionChargeItem record {|
    *r5:BackboneElement;

    r5:CodeableReference chargeItemCode;
    r5:Extension[] extension?;
    r5:Period effectivePeriod?;
    r5:Extension[] modifierExtension?;
    r5:Quantity count;
    string id?;
    r5:UsageContext[] useContext?;
|};

# FHIR DeviceDefinitionUdiDeviceIdentifier datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + deviceIdentifier - The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.
# + jurisdiction - The jurisdiction to which the deviceIdentifier applies.
# + marketDistribution - Indicates where and when the device is available on the market.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + issuer - The organization that assigns the identifier algorithm.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionUdiDeviceIdentifier",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.udiDeviceIdentifier.extension"
        },
        "deviceIdentifier": {
            name: "deviceIdentifier",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.",
            path: "DeviceDefinition.udiDeviceIdentifier.deviceIdentifier"
        },
        "jurisdiction": {
            name: "jurisdiction",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The jurisdiction to which the deviceIdentifier applies.",
            path: "DeviceDefinition.udiDeviceIdentifier.jurisdiction"
        },
        "marketDistribution": {
            name: "marketDistribution",
            dataType: DeviceDefinitionUdiDeviceIdentifierMarketDistribution,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates where and when the device is available on the market.",
            path: "DeviceDefinition.udiDeviceIdentifier.marketDistribution"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.udiDeviceIdentifier.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.udiDeviceIdentifier.id"
        },
        "issuer": {
            name: "issuer",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The organization that assigns the identifier algorithm.",
            path: "DeviceDefinition.udiDeviceIdentifier.issuer"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionUdiDeviceIdentifier record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    string deviceIdentifier;
    r5:uri jurisdiction;
    DeviceDefinitionUdiDeviceIdentifierMarketDistribution[] marketDistribution?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:uri issuer;
|};

# DeviceDefinitionProductionIdentifierInUDI enum
public enum DeviceDefinitionProductionIdentifierInUDI {
   CODE_PRODUCTIONIDENTIFIERINUDI_MANUFACTURED_DATE = "manufactured-date",
   CODE_PRODUCTIONIDENTIFIERINUDI_SOFTWARE_VERSION = "software-version",
   CODE_PRODUCTIONIDENTIFIERINUDI_LOT_NUMBER = "lot-number",
   CODE_PRODUCTIONIDENTIFIERINUDI_SERIAL_NUMBER = "serial-number",
   CODE_PRODUCTIONIDENTIFIERINUDI_BIOLOGICAL_SOURCE = "biological-source",
   CODE_PRODUCTIONIDENTIFIERINUDI_EXPIRATION_DATE = "expiration-date"
}

# FHIR DeviceDefinitionUdiDeviceIdentifierMarketDistribution datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + marketPeriod - Begin and end dates for the commercial distribution of the device.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + subJurisdiction - National state or territory to which the marketDistribution recers, typically where the device is commercialized.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionUdiDeviceIdentifierMarketDistribution",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.udiDeviceIdentifier.marketDistribution.extension"
        },
        "marketPeriod": {
            name: "marketPeriod",
            dataType: r5:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "Begin and end dates for the commercial distribution of the device.",
            path: "DeviceDefinition.udiDeviceIdentifier.marketDistribution.marketPeriod"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.udiDeviceIdentifier.marketDistribution.modifierExtension"
        },
        "subJurisdiction": {
            name: "subJurisdiction",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "National state or territory to which the marketDistribution recers, typically where the device is commercialized.",
            path: "DeviceDefinition.udiDeviceIdentifier.marketDistribution.subJurisdiction"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.udiDeviceIdentifier.marketDistribution.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionUdiDeviceIdentifierMarketDistribution record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Period marketPeriod;
    r5:Extension[] modifierExtension?;
    r5:uri subJurisdiction;
    string id?;
|};

# FHIR DeviceDefinitionHasPart datatype record.
#
# + reference - Reference to the device that is part of the current device.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + count - Number of instances of the component device in the current device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionHasPart",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Reference to the device that is part of the current device.",
            path: "DeviceDefinition.hasPart.reference"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.hasPart.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.hasPart.modifierExtension"
        },
        "count": {
            name: "count",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Number of instances of the component device in the current device.",
            path: "DeviceDefinition.hasPart.count"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.hasPart.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionHasPart record {|
    *r5:BackboneElement;

    r5:Reference reference;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:integer count?;
    string id?;
|};

# FHIR DeviceDefinitionClassification datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + justification - Further information qualifying this classification of the device model.
# + 'type - A classification or risk class of the device model.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionClassification",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.classification.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.classification.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.classification.id"
        },
        "justification": {
            name: "justification",
            dataType: r5:RelatedArtifact,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Further information qualifying this classification of the device model.",
            path: "DeviceDefinition.classification.justification"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A classification or risk class of the device model.",
            path: "DeviceDefinition.classification.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionClassification record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:RelatedArtifact[] justification?;
    r5:CodeableConcept 'type;
|};

# FHIR DeviceDefinitionConformsTo datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + specification - Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance.
# + category - Describes the type of the standard, specification, or formal guidance.
# + 'version - Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionConformsTo",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.conformsTo.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.conformsTo.modifierExtension"
        },
        "specification": {
            name: "specification",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.",
            path: "DeviceDefinition.conformsTo.specification"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.conformsTo.id"
        },
        "source": {
            name: "source",
            dataType: r5:RelatedArtifact,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance.",
            path: "DeviceDefinition.conformsTo.source"
        },
        "category": {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Describes the type of the standard, specification, or formal guidance.",
            path: "DeviceDefinition.conformsTo.category"
        },
        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.",
            path: "DeviceDefinition.conformsTo.version"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionConformsTo record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept specification;
    string id?;
    r5:RelatedArtifact[] 'source?;
    r5:CodeableConcept category?;
    string[] 'version?;
|};

# FHIR DeviceDefinitionPackaging datatype record.
#
# + identifier - The business identifier of the packaged medication.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + count - The number of items contained in the package (devices or sub-packages).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - A code that defines the specific type of packaging.
# + distributor - An organization that distributes the packaged device.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionPackaging",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The business identifier of the packaged medication.",
            path: "DeviceDefinition.packaging.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.packaging.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.packaging.modifierExtension"
        },
        "count": {
            name: "count",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The number of items contained in the package (devices or sub-packages).",
            path: "DeviceDefinition.packaging.count"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.packaging.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code that defines the specific type of packaging.",
            path: "DeviceDefinition.packaging.type"
        },
        "distributor": {
            name: "distributor",
            dataType: DeviceDefinitionPackagingDistributor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An organization that distributes the packaged device.",
            path: "DeviceDefinition.packaging.distributor"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionPackaging record {|
    *r5:BackboneElement;

    r5:Identifier identifier?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:integer count?;
    string id?;
    r5:CodeableConcept 'type?;
    DeviceDefinitionPackagingDistributor[] distributor?;
|};

# FHIR DeviceDefinitionCorrectiveAction datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - Start and end dates of the corrective action.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + recall - Whether the last corrective action known for this device was a recall.
# + scope - The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionCorrectiveAction",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.correctiveAction.extension"
        },
        "period": {
            name: "period",
            dataType: r5:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "Start and end dates of the corrective action.",
            path: "DeviceDefinition.correctiveAction.period"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.correctiveAction.modifierExtension"
        },
        "recall": {
            name: "recall",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether the last corrective action known for this device was a recall.",
            path: "DeviceDefinition.correctiveAction.recall"
        },
        "scope": {
            name: "scope",
            dataType: DeviceDefinitionCorrectiveActionScope,
            min: 0,
            max: 1,
            isArray: false,
            description: "The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.",
            path: "DeviceDefinition.correctiveAction.scope"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.correctiveAction.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionCorrectiveAction record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Period period;
    r5:Extension[] modifierExtension?;
    boolean recall;
    DeviceDefinitionCorrectiveActionScope scope?;
    string id?;
|};

# DeviceDefinitionDeviceNameType enum
public enum DeviceDefinitionDeviceNameType {
   CODE_TYPE_REGISTERED_NAME = "registered-name",
   CODE_TYPE_USER_FRIENDLY_NAME = "user-friendly-name",
   CODE_TYPE_PATIENT_REPORTED_NAME = "patient-reported-name"
}

# FHIR DeviceDefinitionProperty datatype record.
#
# + valueCodeableConcept - The value of the property specified by the associated property.type code.
# + valueBoolean - The value of the property specified by the associated property.type code.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueAttachment - The value of the property specified by the associated property.type code.
# + valueString - The value of the property specified by the associated property.type code.
# + valueRange - The value of the property specified by the associated property.type code.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Code that specifies the property such as a resolution or color being represented.
# + valueInteger - The value of the property specified by the associated property.type code.
# + valueQuantity - The value of the property specified by the associated property.type code.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionProperty",
    baseType: (),
    elements: {
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.property.extension"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.property.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.property.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Code that specifies the property such as a resolution or color being represented.",
            path: "DeviceDefinition.property.type"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the property specified by the associated property.type code.",
            path: "DeviceDefinition.property.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionProperty record {|
    *r5:BackboneElement;

    r5:CodeableConcept valueCodeableConcept;
    boolean valueBoolean;
    r5:Extension[] extension?;
    r5:Attachment valueAttachment;
    string valueString;
    r5:Range valueRange;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type;
    r5:integer valueInteger;
    r5:Quantity valueQuantity;
|};

# FHIR DeviceDefinitionPackagingDistributor datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Distributor's human-readable name.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + organizationReference - Distributor as an Organization resource.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionPackagingDistributor",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.packaging.distributor.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.packaging.distributor.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Distributor's human-readable name.",
            path: "DeviceDefinition.packaging.distributor.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.packaging.distributor.id"
        },
        "organizationReference": {
            name: "organizationReference",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Distributor as an Organization resource.",
            path: "DeviceDefinition.packaging.distributor.organizationReference"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionPackagingDistributor record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string name?;
    string id?;
    r5:Reference[] organizationReference?;
|};

# FHIR DeviceDefinitionRegulatoryIdentifier datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + deviceIdentifier - The identifier itself.
# + jurisdiction - The jurisdiction to which the deviceIdentifier applies.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of identifier itself.
# + issuer - The organization that issued this identifier.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionRegulatoryIdentifier",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.regulatoryIdentifier.extension"
        },
        "deviceIdentifier": {
            name: "deviceIdentifier",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identifier itself.",
            path: "DeviceDefinition.regulatoryIdentifier.deviceIdentifier"
        },
        "jurisdiction": {
            name: "jurisdiction",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The jurisdiction to which the deviceIdentifier applies.",
            path: "DeviceDefinition.regulatoryIdentifier.jurisdiction"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.regulatoryIdentifier.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.regulatoryIdentifier.id"
        },
        "type": {
            name: "type",
            dataType: DeviceDefinitionRegulatoryIdentifierType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of identifier itself.",
            path: "DeviceDefinition.regulatoryIdentifier.type"
        },
        "issuer": {
            name: "issuer",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The organization that issued this identifier.",
            path: "DeviceDefinition.regulatoryIdentifier.issuer"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionRegulatoryIdentifier record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    string deviceIdentifier;
    r5:uri jurisdiction;
    r5:Extension[] modifierExtension?;
    string id?;
    DeviceDefinitionRegulatoryIdentifierType 'type;
    r5:uri issuer;
|};

# FHIR DeviceDefinitionDeviceName datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of deviceName. RegisteredName | UserFriendlyName | PatientReportedName.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionDeviceName",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.deviceName.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.deviceName.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.",
            path: "DeviceDefinition.deviceName.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.deviceName.id"
        },
        "type": {
            name: "type",
            dataType: DeviceDefinitionDeviceNameType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of deviceName. RegisteredName | UserFriendlyName | PatientReportedName.",
            path: "DeviceDefinition.deviceName.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionDeviceName record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string name;
    string id?;
    DeviceDefinitionDeviceNameType 'type;
|};

# FHIR DeviceDefinitionVersion datatype record.
#
# + component - The hardware or software module of the device to which the version applies.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of the device version, e.g. manufacturer, approved, internal.
# + value - The version text.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionVersion",
    baseType: (),
    elements: {
        "component": {
            name: "component",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The hardware or software module of the device to which the version applies.",
            path: "DeviceDefinition.version.component"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.version.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.version.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.version.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of the device version, e.g. manufacturer, approved, internal.",
            path: "DeviceDefinition.version.type"
        },
        "value": {
            name: "value",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The version text.",
            path: "DeviceDefinition.version.value"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionVersion record {|
    *r5:BackboneElement;

    r5:Identifier component?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type?;
    string value;
|};

# DeviceDefinitionCorrectiveActionScope enum
public enum DeviceDefinitionCorrectiveActionScope {
   CODE_SCOPE_LOT_NUMBERS = "lot-numbers",
   CODE_SCOPE_SERIAL_NUMBERS = "serial-numbers",
   CODE_SCOPE_MODEL = "model"
}

# DeviceDefinitionRegulatoryIdentifierType enum
public enum DeviceDefinitionRegulatoryIdentifierType {
   CODE_TYPE_LICENSE = "license",
   CODE_TYPE_BASIC = "basic",
   CODE_TYPE_MASTER = "master"
}

# FHIR DeviceDefinitionLink datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + relatedDevice - A reference to the linked device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + relation - The type indicates the relationship of the related device to the device instance.
@r5:DataTypeDefinition {
    name: "DeviceDefinitionLink",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.link.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.link.modifierExtension"
        },
        "relatedDevice": {
            name: "relatedDevice",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to the linked device.",
            path: "DeviceDefinition.link.relatedDevice"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.link.id"
        },
        "relation": {
            name: "relation",
            dataType: r5:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type indicates the relationship of the related device to the device instance.",
            path: "DeviceDefinition.link.relation"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionLink record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:CodeableReference relatedDevice;
    string id?;
    r5:Coding relation;
|};

