// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_ADVERSEEVENT = "http://hl7.org/fhir/StructureDefinition/AdverseEvent";
public const RESOURCE_NAME_ADVERSEEVENT = "AdverseEvent";

# FHIR AdverseEvent resource record.
#
# + resourceType - The type of the resource describes
# + note - Comments made about the adverse event by the performer, subject or other participants.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + preventiveAction - Preventive actions that contributed to avoiding the adverse event.
# + study - The research study that the subject is enrolled in.
# + code - Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.
# + subject - This subject or group impacted by the event.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + participant - Indicates who or what participated in the adverse event and how they were involved.
# + expectedInResearchStudy - Considered likely or probable or anticipated in the research study. Whether the reported event matches any of the outcomes for the patient that are considered by the study as known or likely.
# + resultingEffect - Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.
# + supportingInfo - Supporting information relevant to the event.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + outcome - Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
# + identifier - Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
# + recorder - Information on who recorded the adverse event. May be the patient or a practitioner.
# + actuality - Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely.
# + mitigatingAction - The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
# + recordedDate - The date on which the existence of the AdverseEvent was first recorded.
# + encounter - The Encounter associated with the start of the AdverseEvent.
# + occurrenceTiming - The date (and perhaps time) when the adverse event occurred.
# + suspectEntity - Describes the entity that is suspected to have caused the adverse event.
# + contributingFactor - The contributing factors suspected to have increased the probability or severity of the adverse event.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + occurrencePeriod - The date (and perhaps time) when the adverse event occurred.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + seriousness - Assessment whether this event, or averted event, was of clinical importance.
# + detected - Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + location - The information about where the adverse event occurred.
# + occurrenceDateTime - The date (and perhaps time) when the adverse event occurred.
# + category - The overall type of event, intended for search and filtering purposes.
# + status - The current state of the adverse event or potential adverse event.
@r5:ResourceDefinition {
    resourceType: "AdverseEvent",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/AdverseEvent",
    elements: {
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.note"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.extension"
        },
        "preventiveAction" : {
            name: "preventiveAction",
            dataType: AdverseEventPreventiveAction,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.preventiveAction"
        },
        "study" : {
            name: "study",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.study"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.code",
            valueSet: "http://hl7.org/fhir/ValueSet/adverse-event-type"
        },
        "subject" : {
            name: "subject",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "AdverseEvent.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "participant" : {
            name: "participant",
            dataType: AdverseEventParticipant,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.participant"
        },
        "expectedInResearchStudy" : {
            name: "expectedInResearchStudy",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.expectedInResearchStudy"
        },
        "resultingEffect" : {
            name: "resultingEffect",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.resultingEffect"
        },
        "supportingInfo" : {
            name: "supportingInfo",
            dataType: AdverseEventSupportingInfo,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.supportingInfo"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.text"
        },
        "outcome" : {
            name: "outcome",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.outcome",
            valueSet: "http://hl7.org/fhir/ValueSet/adverse-event-outcome"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.identifier"
        },
        "recorder" : {
            name: "recorder",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.recorder"
        },
        "actuality" : {
            name: "actuality",
            dataType: AdverseEventActuality,
            min: 1,
            max: 1,
            isArray: false,
            path: "AdverseEvent.actuality",
            valueSet: "http://hl7.org/fhir/ValueSet/adverse-event-actuality|5.0.0"
        },
        "mitigatingAction" : {
            name: "mitigatingAction",
            dataType: AdverseEventMitigatingAction,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.mitigatingAction"
        },
        "recordedDate" : {
            name: "recordedDate",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.recordedDate"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.encounter"
        },
        "occurrenceTiming" : {
            name: "occurrenceTiming",
            dataType: r5:Timing,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.occurrence[x]"
        },
        "suspectEntity" : {
            name: "suspectEntity",
            dataType: AdverseEventSuspectEntity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.suspectEntity"
        },
        "contributingFactor" : {
            name: "contributingFactor",
            dataType: AdverseEventContributingFactor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.contributingFactor"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.contained"
        },
        "occurrencePeriod" : {
            name: "occurrencePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.occurrence[x]"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.meta"
        },
        "seriousness" : {
            name: "seriousness",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.seriousness",
            valueSet: "http://hl7.org/fhir/ValueSet/adverse-event-seriousness"
        },
        "detected" : {
            name: "detected",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.detected"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.implicitRules"
        },
        "location" : {
            name: "location",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.location"
        },
        "occurrenceDateTime" : {
            name: "occurrenceDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "AdverseEvent.occurrence[x]"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AdverseEvent.category",
            valueSet: "http://hl7.org/fhir/ValueSet/adverse-event-category"
        },
        "status" : {
            name: "status",
            dataType: AdverseEventStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "AdverseEvent.status",
            valueSet: "http://hl7.org/fhir/ValueSet/adverse-event-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type AdverseEvent record {|
    *r5:DomainResource;

    RESOURCE_NAME_ADVERSEEVENT resourceType = RESOURCE_NAME_ADVERSEEVENT;

    r5:Annotation[] note?;
    r5:Extension[] extension?;
    AdverseEventPreventiveAction[] preventiveAction?;
    r5:Reference[] study?;
    r5:CodeableConcept code?;
    r5:Reference subject;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    AdverseEventParticipant[] participant?;
    boolean expectedInResearchStudy?;
    r5:Reference[] resultingEffect?;
    AdverseEventSupportingInfo[] supportingInfo?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept[] outcome?;
    r5:Identifier[] identifier?;
    r5:Reference recorder?;
    AdverseEventActuality actuality;
    AdverseEventMitigatingAction[] mitigatingAction?;
    r5:dateTime recordedDate?;
    r5:Reference encounter?;
    r5:Timing occurrenceTiming?;
    AdverseEventSuspectEntity[] suspectEntity?;
    AdverseEventContributingFactor[] contributingFactor?;
    r5:Resource[] contained?;
    r5:Period occurrencePeriod?;
    r5:Meta meta?;
    r5:CodeableConcept seriousness?;
    r5:dateTime detected?;
    r5:uri implicitRules?;
    r5:Reference location?;
    r5:dateTime occurrenceDateTime?;
    r5:CodeableConcept[] category?;
    AdverseEventStatus status;
    r5:Element ...;
|};

# AdverseEventActuality enum
public enum AdverseEventActuality {
   CODE_ACTUALITY_ACTUAL = "actual",
   CODE_ACTUALITY_POTENTIAL = "potential"
}

# FHIR AdverseEventMitigatingAction datatype record.
#
# + itemReference - The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + itemCodeableConcept - The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AdverseEventMitigatingAction",
    baseType: (),
    elements: {
        "itemReference": {
            name: "itemReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.",
            path: "AdverseEvent.mitigatingAction.item[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.mitigatingAction.extension"
        },
        "itemCodeableConcept": {
            name: "itemCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.",
            path: "AdverseEvent.mitigatingAction.item[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.mitigatingAction.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.mitigatingAction.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventMitigatingAction record {|
    *r5:BackboneElement;

    r5:Reference itemReference;
    r5:Extension[] extension?;
    r5:CodeableConcept itemCodeableConcept;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# AdverseEventStatus enum
public enum AdverseEventStatus {
   CODE_STATUS_COMPLETED = "completed",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_IN_PROGRESS = "in-progress",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR AdverseEventParticipant datatype record.
#
# + actor - Indicates who or what participated in the event.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'function - Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AdverseEventParticipant",
    baseType: (),
    elements: {
        "actor": {
            name: "actor",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Indicates who or what participated in the event.",
            path: "AdverseEvent.participant.actor"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.participant.extension"
        },
        "function": {
            name: "function",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.",
            path: "AdverseEvent.participant.function"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.participant.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.participant.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventParticipant record {|
    *r5:BackboneElement;

    r5:Reference actor;
    r5:Extension[] extension?;
    r5:CodeableConcept 'function?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR AdverseEventPreventiveAction datatype record.
#
# + itemReference - The action that contributed to avoiding the adverse event.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + itemCodeableConcept - The action that contributed to avoiding the adverse event.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AdverseEventPreventiveAction",
    baseType: (),
    elements: {
        "itemReference": {
            name: "itemReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The action that contributed to avoiding the adverse event.",
            path: "AdverseEvent.preventiveAction.item[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.preventiveAction.extension"
        },
        "itemCodeableConcept": {
            name: "itemCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The action that contributed to avoiding the adverse event.",
            path: "AdverseEvent.preventiveAction.item[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.preventiveAction.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.preventiveAction.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventPreventiveAction record {|
    *r5:BackboneElement;

    r5:Reference itemReference;
    r5:Extension[] extension?;
    r5:CodeableConcept itemCodeableConcept;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR AdverseEventSupportingInfo datatype record.
#
# + itemReference - Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS). Supporting information is not a contributing factor, preventive action, or mitigating action.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + itemCodeableConcept - Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS). Supporting information is not a contributing factor, preventive action, or mitigating action.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AdverseEventSupportingInfo",
    baseType: (),
    elements: {
        "itemReference": {
            name: "itemReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS). Supporting information is not a contributing factor, preventive action, or mitigating action.",
            path: "AdverseEvent.supportingInfo.item[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.supportingInfo.extension"
        },
        "itemCodeableConcept": {
            name: "itemCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Relevant past history for the subject. In a clinical care context, an example being a patient had an adverse event following a pencillin administration and the patient had a previously documented penicillin allergy. In a clinical trials context, an example is a bunion or rash that was present prior to the study. Additionally, the supporting item can be a document that is relevant to this instance of the adverse event that is not part of the subject's medical history. For example, a clinical note, staff list, or material safety data sheet (MSDS). Supporting information is not a contributing factor, preventive action, or mitigating action.",
            path: "AdverseEvent.supportingInfo.item[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.supportingInfo.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.supportingInfo.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventSupportingInfo record {|
    *r5:BackboneElement;

    r5:Reference itemReference;
    r5:Extension[] extension?;
    r5:CodeableConcept itemCodeableConcept;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR AdverseEventSuspectEntityCausality datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + assessmentMethod - The method of evaluating the relatedness of the suspected entity to the event.
# + author - The author of the information on the possible cause of the event.
# + entityRelatedness - The result of the assessment regarding the relatedness of the suspected entity to the event.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AdverseEventSuspectEntityCausality",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.suspectEntity.causality.extension"
        },
        "assessmentMethod": {
            name: "assessmentMethod",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The method of evaluating the relatedness of the suspected entity to the event.",
            path: "AdverseEvent.suspectEntity.causality.assessmentMethod"
        },
        "author": {
            name: "author",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The author of the information on the possible cause of the event.",
            path: "AdverseEvent.suspectEntity.causality.author"
        },
        "entityRelatedness": {
            name: "entityRelatedness",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The result of the assessment regarding the relatedness of the suspected entity to the event.",
            path: "AdverseEvent.suspectEntity.causality.entityRelatedness"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.suspectEntity.causality.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.suspectEntity.causality.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventSuspectEntityCausality record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept assessmentMethod?;
    r5:Reference author?;
    r5:CodeableConcept entityRelatedness?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR AdverseEventSuspectEntity datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + instanceReference - Identifies the actual instance of what caused the adverse event. May be a substance, medication, medication administration, medication statement or a device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + causality - Information on the possible cause of the event.
# + instanceCodeableConcept - Identifies the actual instance of what caused the adverse event. May be a substance, medication, medication administration, medication statement or a device.
@r5:DataTypeDefinition {
    name: "AdverseEventSuspectEntity",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.suspectEntity.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.suspectEntity.modifierExtension"
        },
        "instanceReference": {
            name: "instanceReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies the actual instance of what caused the adverse event. May be a substance, medication, medication administration, medication statement or a device.",
            path: "AdverseEvent.suspectEntity.instance[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.suspectEntity.id"
        },
        "causality": {
            name: "causality",
            dataType: AdverseEventSuspectEntityCausality,
            min: 0,
            max: 1,
            isArray: false,
            description: "Information on the possible cause of the event.",
            path: "AdverseEvent.suspectEntity.causality"
        },
        "instanceCodeableConcept": {
            name: "instanceCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies the actual instance of what caused the adverse event. May be a substance, medication, medication administration, medication statement or a device.",
            path: "AdverseEvent.suspectEntity.instance[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventSuspectEntity record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:Reference instanceReference;
    string id?;
    AdverseEventSuspectEntityCausality causality?;
    r5:CodeableConcept instanceCodeableConcept;
|};

# FHIR AdverseEventContributingFactor datatype record.
#
# + itemReference - The item that is suspected to have increased the probability or severity of the adverse event.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + itemCodeableConcept - The item that is suspected to have increased the probability or severity of the adverse event.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "AdverseEventContributingFactor",
    baseType: (),
    elements: {
        "itemReference": {
            name: "itemReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The item that is suspected to have increased the probability or severity of the adverse event.",
            path: "AdverseEvent.contributingFactor.item[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AdverseEvent.contributingFactor.extension"
        },
        "itemCodeableConcept": {
            name: "itemCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The item that is suspected to have increased the probability or severity of the adverse event.",
            path: "AdverseEvent.contributingFactor.item[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AdverseEvent.contributingFactor.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AdverseEvent.contributingFactor.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AdverseEventContributingFactor record {|
    *r5:BackboneElement;

    r5:Reference itemReference;
    r5:Extension[] extension?;
    r5:CodeableConcept itemCodeableConcept;
    r5:Extension[] modifierExtension?;
    string id?;
|};

