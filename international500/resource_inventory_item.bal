// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_INVENTORYITEM = "http://hl7.org/fhir/StructureDefinition/InventoryItem";
public const RESOURCE_NAME_INVENTORYITEM = "InventoryItem";

# FHIR InventoryItem resource record.
#
# + resourceType - The type of the resource describes
# + identifier - Business identifier for the inventory item.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Code designating the specific type of item.
# + instance - Instances or occurrences of the product.
# + inventoryStatus - The usage status e.g. recalled, in use, discarded... This can be used to indicate that the items have been taken out of inventory, or are in use, etc.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + association - Association with other items or products.
# + description - The descriptive characteristics of the inventory item.
# + productReference - Link to a product resource used in clinical workflows.
# + responsibleOrganization - Organization(s) responsible for the product.
# + language - The base language in which the resource is written.
# + characteristic - The descriptive or identifying characteristics of the item.
# + baseUnit - The base unit of measure - the unit in which the product is used or counted.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - The item name(s) - the brand name, or common name, functional name, generic name.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + netContent - Net content or amount present in the item.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + category - Category or class of the item.
# + status - Status of the item entry.
@r5:ResourceDefinition {
    resourceType: "InventoryItem",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/InventoryItem",
    elements: {
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.identifier"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.extension"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.code"
        },
        "instance" : {
            name: "instance",
            dataType: InventoryItemInstance,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.instance"
        },
        "inventoryStatus" : {
            name: "inventoryStatus",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.inventoryStatus"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.modifierExtension"
        },
        "association" : {
            name: "association",
            dataType: InventoryItemAssociation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.association"
        },
        "description" : {
            name: "description",
            dataType: InventoryItemDescription,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.description"
        },
        "productReference" : {
            name: "productReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.productReference"
        },
        "responsibleOrganization" : {
            name: "responsibleOrganization",
            dataType: InventoryItemResponsibleOrganization,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.responsibleOrganization"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "characteristic" : {
            name: "characteristic",
            dataType: InventoryItemCharacteristic,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.characteristic"
        },
        "baseUnit" : {
            name: "baseUnit",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.baseUnit"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.meta"
        },
        "name" : {
            name: "name",
            dataType: InventoryItemName,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.implicitRules"
        },
        "netContent" : {
            name: "netContent",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.netContent"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "InventoryItem.text"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "InventoryItem.category"
        },
        "status" : {
            name: "status",
            dataType: InventoryItemStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "InventoryItem.status",
            valueSet: "http://hl7.org/fhir/ValueSet/inventoryitem-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type InventoryItem record {|
    *r5:DomainResource;

    RESOURCE_NAME_INVENTORYITEM resourceType = RESOURCE_NAME_INVENTORYITEM;

    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    r5:CodeableConcept[] code?;
    InventoryItemInstance instance?;
    r5:CodeableConcept[] inventoryStatus?;
    r5:Extension[] modifierExtension?;
    InventoryItemAssociation[] association?;
    InventoryItemDescription description?;
    r5:Reference productReference?;
    InventoryItemResponsibleOrganization[] responsibleOrganization?;
    r5:code language?;
    InventoryItemCharacteristic[] characteristic?;
    r5:CodeableConcept baseUnit?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    InventoryItemName[] name?;
    r5:uri implicitRules?;
    r5:SimpleQuantity netContent?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept[] category?;
    InventoryItemStatus status;
    r5:Element ...;
|};

# FHIR InventoryItemName datatype record.
#
# + nameType - The type of name e.g. 'brand-name', 'functional-name', 'common-name'.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name or designation that the item is given.
# + language - The language that the item name is expressed in.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "InventoryItemName",
    baseType: (),
    elements: {
        "nameType": {
            name: "nameType",
            dataType: r5:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of name e.g. 'brand-name', 'functional-name', 'common-name'.",
            path: "InventoryItem.name.nameType"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InventoryItem.name.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InventoryItem.name.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name or designation that the item is given.",
            path: "InventoryItem.name.name"
        },
        "language": {
            name: "language",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "The language that the item name is expressed in.",
            path: "InventoryItem.name.language"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InventoryItem.name.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type InventoryItemName record {|
    *r5:BackboneElement;

    r5:Coding nameType;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string name;
    r5:code language;
    string id?;
|};

# FHIR InventoryItemDescription datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Textual description of the item.
# + language - The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "InventoryItemDescription",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InventoryItem.description.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InventoryItem.description.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Textual description of the item.",
            path: "InventoryItem.description.description"
        },
        "language": {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language.",
            path: "InventoryItem.description.language"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InventoryItem.description.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type InventoryItemDescription record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string description?;
    r5:code language?;
    string id?;
|};

# FHIR InventoryItemInstance datatype record.
#
# + identifier - The identifier for the physical instance, typically a serial number.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + subject - The subject that the item is associated with.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + location - The location that the item is associated with.
# + expiry - The expiry date or date and time for the product.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + lotNumber - The lot or batch number of the item.
@r5:DataTypeDefinition {
    name: "InventoryItemInstance",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The identifier for the physical instance, typically a serial number.",
            path: "InventoryItem.instance.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InventoryItem.instance.extension"
        },
        "subject": {
            name: "subject",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The subject that the item is associated with.",
            path: "InventoryItem.instance.subject"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InventoryItem.instance.modifierExtension"
        },
        "location": {
            name: "location",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The location that the item is associated with.",
            path: "InventoryItem.instance.location"
        },
        "expiry": {
            name: "expiry",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The expiry date or date and time for the product.",
            path: "InventoryItem.instance.expiry"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InventoryItem.instance.id"
        },
        "lotNumber": {
            name: "lotNumber",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The lot or batch number of the item.",
            path: "InventoryItem.instance.lotNumber"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type InventoryItemInstance record {|
    *r5:BackboneElement;

    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    r5:Reference subject?;
    r5:Extension[] modifierExtension?;
    r5:Reference location?;
    r5:dateTime expiry?;
    string id?;
    string lotNumber?;
|};

# FHIR InventoryItemCharacteristic datatype record.
#
# + valueBoolean - The value of the attribute.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueRange - The value of the attribute.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + characteristicType - The type of characteristic that is being defined.
# + valueDecimal - The value of the attribute.
# + valueUrl - The value of the attribute.
# + valueAddress - The value of the attribute.
# + valueCodeableConcept - The value of the attribute.
# + valueRatio - The value of the attribute.
# + valueString - The value of the attribute.
# + valueDateTime - The value of the attribute.
# + valueDuration - The value of the attribute.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - The value of the attribute.
# + valueQuantity - The value of the attribute.
# + valueAnnotation - The value of the attribute.
@r5:DataTypeDefinition {
    name: "InventoryItemCharacteristic",
    baseType: (),
    elements: {
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InventoryItem.characteristic.extension"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r5:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InventoryItem.characteristic.modifierExtension"
        },
        "characteristicType": {
            name: "characteristicType",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of characteristic that is being defined.",
            path: "InventoryItem.characteristic.characteristicType"
        },
        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueUrl": {
            name: "valueUrl",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueAddress": {
            name: "valueAddress",
            dataType: r5:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueRatio": {
            name: "valueRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueDuration": {
            name: "valueDuration",
            dataType: r5:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InventoryItem.characteristic.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        },
        "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r5:Annotation,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the attribute.",
            path: "InventoryItem.characteristic.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type InventoryItemCharacteristic record {|
    *r5:BackboneElement;

    boolean valueBoolean;
    r5:Extension[] extension?;
    r5:Range valueRange;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept characteristicType;
    decimal valueDecimal;
    r5:urlType valueUrl;
    r5:Address valueAddress;
    r5:CodeableConcept valueCodeableConcept;
    r5:Ratio valueRatio;
    string valueString;
    r5:dateTime valueDateTime;
    r5:Duration valueDuration;
    string id?;
    r5:integer valueInteger;
    r5:Quantity valueQuantity;
    r5:Annotation valueAnnotation;
|};

# FHIR InventoryItemResponsibleOrganization datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - The role of the organization e.g. manufacturer, distributor, etc.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + organization - An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "InventoryItemResponsibleOrganization",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InventoryItem.responsibleOrganization.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The role of the organization e.g. manufacturer, distributor, etc.",
            path: "InventoryItem.responsibleOrganization.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InventoryItem.responsibleOrganization.modifierExtension"
        },
        "organization": {
            name: "organization",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc.",
            path: "InventoryItem.responsibleOrganization.organization"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InventoryItem.responsibleOrganization.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type InventoryItemResponsibleOrganization record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept role;
    r5:Extension[] modifierExtension?;
    r5:Reference organization;
    string id?;
|};

# InventoryItemStatus enum
public enum InventoryItemStatus {
   CODE_STATUS_INACTIVE = "inactive",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR InventoryItemAssociation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + quantity - The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product.
# + associationType - This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + relatedItem - The related item or product.
@r5:DataTypeDefinition {
    name: "InventoryItemAssociation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "InventoryItem.association.extension"
        },
        "quantity": {
            name: "quantity",
            dataType: r5:Ratio,
            min: 1,
            max: 1,
            isArray: false,
            description: "The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product.",
            path: "InventoryItem.association.quantity"
        },
        "associationType": {
            name: "associationType",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with.",
            path: "InventoryItem.association.associationType"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "InventoryItem.association.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "InventoryItem.association.id"
        },
        "relatedItem": {
            name: "relatedItem",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The related item or product.",
            path: "InventoryItem.association.relatedItem"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type InventoryItemAssociation record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Ratio quantity;
    r5:CodeableConcept associationType;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:Reference relatedItem;
|};

